
Garage_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003030  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00003030  000030c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008000ae  008000ae  00003112  2**0
                  ALLOC
  3 .stab         000028ec  00000000  00000000  00003114  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e85  00000000  00000000  00005a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006885  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000069c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000877e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009669  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a418  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a578  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a805  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000afd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 49 0c 	jmp	0x1892	; 0x1892 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3b       	cpi	r26, 0xB9	; 185
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7f 17 	call	0x2efe	; 0x2efe <main>
      8a:	0c 94 16 18 	jmp	0x302c	; 0x302c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 df 17 	jmp	0x2fbe	; 0x2fbe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ea       	ldi	r26, 0xA2	; 162
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 07 18 	jmp	0x300e	; 0x300e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 07 18 	jmp	0x300e	; 0x300e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 df 17 	jmp	0x2fbe	; 0x2fbe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ea       	ldi	r24, 0xA2	; 162
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 07 18 	jmp	0x300e	; 0x300e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 07 18 	jmp	0x300e	; 0x300e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 07 18 	jmp	0x300e	; 0x300e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ef 17 	jmp	0x2fde	; 0x2fde <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to low for command*/
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_LOW);
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	62 e0       	ldi	r22, 0x02	; 2
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>

	/*Set RW pin to low for write*/
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	63 e0       	ldi	r22, 0x03	; 3
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>

	/*Set command to data pins*/
	DIO_vidSetPortVal(CLCD_DATA_PORT,Copy_u8Command);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_vidSetPortVal>

	/*Send enable pulse*/
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	64 e0       	ldi	r22, 0x04	; 4
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidSendCommand+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	64 e0       	ldi	r22, 0x04	; 4
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>
}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to high for data*/
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_HIGH);
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	62 e0       	ldi	r22, 0x02	; 2
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>

	/*Set RW pin to low for write*/
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	63 e0       	ldi	r22, 0x03	; 3
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>

	/*Set Data to data pins*/
	DIO_vidSetPortVal(CLCD_DATA_PORT,Copy_u8Data);
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_vidSetPortVal>

	/*Send enable pulse*/
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	64 e0       	ldi	r22, 0x04	; 4
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e4       	ldi	r27, 0x40	; 64
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <CLCD_voidSendData+0xee>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <CLCD_voidSendData+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <CLCD_voidSendData+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <CLCD_voidSendData+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	64 e0       	ldi	r22, 0x04	; 4
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>
}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	2e 97       	sbiw	r28, 0x0e	; 14
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e2       	ldi	r26, 0x20	; 32
     dd8:	b2 e4       	ldi	r27, 0x42	; 66
     dda:	8b 87       	std	Y+11, r24	; 0x0b
     ddc:	9c 87       	std	Y+12, r25	; 0x0c
     dde:	ad 87       	std	Y+13, r26	; 0x0d
     de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de2:	6b 85       	ldd	r22, Y+11	; 0x0b
     de4:	7c 85       	ldd	r23, Y+12	; 0x0c
     de6:	8d 85       	ldd	r24, Y+13	; 0x0d
     de8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4a ef       	ldi	r20, 0xFA	; 250
     df0:	54 e4       	ldi	r21, 0x44	; 68
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8f 83       	std	Y+7, r24	; 0x07
     dfc:	98 87       	std	Y+8, r25	; 0x08
     dfe:	a9 87       	std	Y+9, r26	; 0x09
     e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e02:	6f 81       	ldd	r22, Y+7	; 0x07
     e04:	78 85       	ldd	r23, Y+8	; 0x08
     e06:	89 85       	ldd	r24, Y+9	; 0x09
     e08:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e16:	88 23       	and	r24, r24
     e18:	2c f4       	brge	.+10     	; 0xe24 <CLCD_voidInit+0x66>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9e 83       	std	Y+6, r25	; 0x06
     e20:	8d 83       	std	Y+5, r24	; 0x05
     e22:	3f c0       	rjmp	.+126    	; 0xea2 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     e24:	6f 81       	ldd	r22, Y+7	; 0x07
     e26:	78 85       	ldd	r23, Y+8	; 0x08
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	3f ef       	ldi	r19, 0xFF	; 255
     e30:	4f e7       	ldi	r20, 0x7F	; 127
     e32:	57 e4       	ldi	r21, 0x47	; 71
     e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e38:	18 16       	cp	r1, r24
     e3a:	4c f5       	brge	.+82     	; 0xe8e <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e40:	8d 85       	ldd	r24, Y+13	; 0x0d
     e42:	9e 85       	ldd	r25, Y+14	; 0x0e
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	9e 83       	std	Y+6, r25	; 0x06
     e62:	8d 83       	std	Y+5, r24	; 0x05
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <CLCD_voidInit+0xc6>
     e66:	88 ec       	ldi	r24, 0xC8	; 200
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9c 83       	std	Y+4, r25	; 0x04
     e6c:	8b 83       	std	Y+3, r24	; 0x03
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <CLCD_voidInit+0xb4>
     e76:	9c 83       	std	Y+4, r25	; 0x04
     e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	69 f7       	brne	.-38     	; 0xe66 <CLCD_voidInit+0xa8>
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8e:	6f 81       	ldd	r22, Y+7	; 0x07
     e90:	78 85       	ldd	r23, Y+8	; 0x08
     e92:	89 85       	ldd	r24, Y+9	; 0x09
     e94:	9a 85       	ldd	r25, Y+10	; 0x0a
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	9e 83       	std	Y+6, r25	; 0x06
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <CLCD_voidInit+0xf0>
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
	/*Wait for more than 30 ms*/
	_delay_ms(40);

	/*Function set command: 2 lines, 5*8 Font size*/
	CLCD_voidSendCommand(0b00111000);
     eb6:	88 e3       	ldi	r24, 0x38	; 56
     eb8:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*Display on off control: display enable, disable cursor, no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
     ebc:	8c e0       	ldi	r24, 0x0C	; 12
     ebe:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*Clear display*/
	CLCD_voidSendCommand(1);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
     ec8:	2e 96       	adiw	r28, 0x0e	; 14
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <CLCD_vidSendString>:

void CLCD_vidSendString(const char *Copy_u8String)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <CLCD_vidSendString+0x6>
     ee0:	0f 92       	push	r0
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	9b 83       	std	Y+3, r25	; 0x03
     ee8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iterator = 0 ;
     eea:	19 82       	std	Y+1, r1	; 0x01
     eec:	0e c0       	rjmp	.+28     	; 0xf0a <CLCD_vidSendString+0x30>
	while(Copy_u8String[Local_u8Iterator] != '\0')
	{
		CLCD_voidSendData(Copy_u8String[Local_u8Iterator]) ;
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	9b 81       	ldd	r25, Y+3	; 0x03
     ef8:	fc 01       	movw	r30, r24
     efa:	e2 0f       	add	r30, r18
     efc:	f3 1f       	adc	r31, r19
     efe:	80 81       	ld	r24, Z
     f00:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		Local_u8Iterator ++ ;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_vidSendString(const char *Copy_u8String)
{
	u8 Local_u8Iterator = 0 ;
	while(Copy_u8String[Local_u8Iterator] != '\0')
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	fc 01       	movw	r30, r24
     f16:	e2 0f       	add	r30, r18
     f18:	f3 1f       	adc	r31, r19
     f1a:	80 81       	ld	r24, Z
     f1c:	88 23       	and	r24, r24
     f1e:	39 f7       	brne	.-50     	; 0xeee <CLCD_vidSendString+0x14>
	{
		CLCD_voidSendData(Copy_u8String[Local_u8Iterator]) ;
		Local_u8Iterator ++ ;
	}
}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <CLCD_GoToXY>:

void CLCD_GoToXY(u8 xPos , u8 yPos)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	00 d0       	rcall	.+0      	; 0xf32 <CLCD_GoToXY+0x6>
     f32:	0f 92       	push	r0
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	8a 83       	std	Y+2, r24	; 0x02
     f3a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DDRAMaddress = 0 ;
     f3c:	19 82       	std	Y+1, r1	; 0x01
	if (xPos == 0)
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	88 23       	and	r24, r24
     f42:	19 f4       	brne	.+6      	; 0xf4a <CLCD_GoToXY+0x1e>
	{
		Local_u8DDRAMaddress = yPos;
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	89 83       	std	Y+1, r24	; 0x01
     f48:	06 c0       	rjmp	.+12     	; 0xf56 <CLCD_GoToXY+0x2a>
	}
	else if (xPos == 1)
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	19 f4       	brne	.+6      	; 0xf56 <CLCD_GoToXY+0x2a>
	{
		Local_u8DDRAMaddress =yPos + 0x40 ;
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	80 5c       	subi	r24, 0xC0	; 192
     f54:	89 83       	std	Y+1, r24	; 0x01
	}

	CLCD_voidSendCommand(Local_u8DDRAMaddress + 128);
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	80 58       	subi	r24, 0x80	; 128
     f5a:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

}
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8 *Copy_u8Pattern , u8 Copy_u8PatternNumber , u8 xPos , u8 yPos)
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	27 97       	sbiw	r28, 0x07	; 7
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	9c 83       	std	Y+4, r25	; 0x04
     f80:	8b 83       	std	Y+3, r24	; 0x03
     f82:	6d 83       	std	Y+5, r22	; 0x05
     f84:	4e 83       	std	Y+6, r20	; 0x06
     f86:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMaddress = 0  , Local_u8Iterator ;
     f88:	1a 82       	std	Y+2, r1	; 0x02

	/*Calculate CGRAM Address whose each location is 8 bytes*/
	Local_u8CGRAMaddress = Copy_u8PatternNumber * 8 ;
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	88 2f       	mov	r24, r24
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM address command to LCD*/
	CLCD_voidSendCommand(Local_u8CGRAMaddress + 64);
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	80 5c       	subi	r24, 0xC0	; 192
     fa2:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*Write the Pattern into CGRAM*/
	for (Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator ++)
     fa6:	19 82       	std	Y+1, r1	; 0x01
     fa8:	0e c0       	rjmp	.+28     	; 0xfc6 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8Iterator]);
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	9c 81       	ldd	r25, Y+4	; 0x04
     fb4:	fc 01       	movw	r30, r24
     fb6:	e2 0f       	add	r30, r18
     fb8:	f3 1f       	adc	r31, r19
     fba:	80 81       	ld	r24, Z
     fbc:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>

	/*Send CGRAM address command to LCD*/
	CLCD_voidSendCommand(Local_u8CGRAMaddress + 64);

	/*Write the Pattern into CGRAM*/
	for (Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator ++)
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	8f 5f       	subi	r24, 0xFF	; 255
     fc4:	89 83       	std	Y+1, r24	; 0x01
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	88 30       	cpi	r24, 0x08	; 8
     fca:	78 f3       	brcs	.-34     	; 0xfaa <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8Iterator]);
	}

	/*go back to DDRAM to Display the pattern*/
	CLCD_GoToXY(xPos , yPos);
     fcc:	8e 81       	ldd	r24, Y+6	; 0x06
     fce:	6f 81       	ldd	r22, Y+7	; 0x07
     fd0:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>

	/*Display data written in CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
     fd4:	8d 81       	ldd	r24, Y+5	; 0x05
     fd6:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
}
     fda:	27 96       	adiw	r28, 0x07	; 7
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <CLCD_write_Number>:
	}*/

//}

void CLCD_write_Number(u16 Copy_u16DecNum)
{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <CLCD_write_Number+0x6>
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <CLCD_write_Number+0x8>
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	9c 83       	std	Y+4, r25	; 0x04
     ffa:	8b 83       	std	Y+3, r24	; 0x03
	static u8 arr_Two_Digits[2] ;
	static u8 arr_Three_Digits[3] ;
	static u8 arr_Four_Digits[4] ;
	u8 index = 0 ;
     ffc:	1a 82       	std	Y+2, r1	; 0x02
	u8 mod ;

	if (Copy_u16DecNum >9 && Copy_u16DecNum <= 99)
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	9c 81       	ldd	r25, Y+4	; 0x04
    1002:	8a 30       	cpi	r24, 0x0A	; 10
    1004:	91 05       	cpc	r25, r1
    1006:	90 f1       	brcs	.+100    	; 0x106c <CLCD_write_Number+0x80>
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	9c 81       	ldd	r25, Y+4	; 0x04
    100c:	84 36       	cpi	r24, 0x64	; 100
    100e:	91 05       	cpc	r25, r1
    1010:	68 f5       	brcc	.+90     	; 0x106c <CLCD_write_Number+0x80>
    1012:	1d c0       	rjmp	.+58     	; 0x104e <CLCD_write_Number+0x62>
	{
		while (Copy_u16DecNum > 0)
		{
			mod = Copy_u16DecNum  % 10 ;
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	2a e0       	ldi	r18, 0x0A	; 10
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	b9 01       	movw	r22, r18
    101e:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__udivmodhi4>
    1022:	89 83       	std	Y+1, r24	; 0x01
			arr_Two_Digits[index] = mod ;
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	88 2f       	mov	r24, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	fc 01       	movw	r30, r24
    102c:	eb 54       	subi	r30, 0x4B	; 75
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	80 83       	st	Z, r24
			Copy_u16DecNum /=10 ;
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	9c 81       	ldd	r25, Y+4	; 0x04
    1038:	2a e0       	ldi	r18, 0x0A	; 10
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	b9 01       	movw	r22, r18
    103e:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__udivmodhi4>
    1042:	cb 01       	movw	r24, r22
    1044:	9c 83       	std	Y+4, r25	; 0x04
    1046:	8b 83       	std	Y+3, r24	; 0x03
			index ++ ;
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	8f 5f       	subi	r24, 0xFF	; 255
    104c:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0 ;
	u8 mod ;

	if (Copy_u16DecNum >9 && Copy_u16DecNum <= 99)
	{
		while (Copy_u16DecNum > 0)
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	9c 81       	ldd	r25, Y+4	; 0x04
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	f9 f6       	brne	.-66     	; 0x1014 <CLCD_write_Number+0x28>
			arr_Two_Digits[index] = mod ;
			Copy_u16DecNum /=10 ;
			index ++ ;
		}

		CLCD_voidSendData(arr_Two_Digits[1] + '0') ;
    1056:	80 91 b6 00 	lds	r24, 0x00B6
    105a:	80 5d       	subi	r24, 0xD0	; 208
    105c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		CLCD_voidSendData(arr_Two_Digits[0] + '0') ;
    1060:	80 91 b5 00 	lds	r24, 0x00B5
    1064:	80 5d       	subi	r24, 0xD0	; 208
    1066:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    106a:	89 c0       	rjmp	.+274    	; 0x117e <CLCD_write_Number+0x192>
	}
	else if (Copy_u16DecNum > 99 && Copy_u16DecNum <= 999)
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	9c 81       	ldd	r25, Y+4	; 0x04
    1070:	84 36       	cpi	r24, 0x64	; 100
    1072:	91 05       	cpc	r25, r1
    1074:	c0 f1       	brcs	.+112    	; 0x10e6 <CLCD_write_Number+0xfa>
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	9c 81       	ldd	r25, Y+4	; 0x04
    107a:	23 e0       	ldi	r18, 0x03	; 3
    107c:	88 3e       	cpi	r24, 0xE8	; 232
    107e:	92 07       	cpc	r25, r18
    1080:	90 f5       	brcc	.+100    	; 0x10e6 <CLCD_write_Number+0xfa>
    1082:	1d c0       	rjmp	.+58     	; 0x10be <CLCD_write_Number+0xd2>
	{
		while (Copy_u16DecNum > 0)
		{
			mod = Copy_u16DecNum  % 10 ;
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	9c 81       	ldd	r25, Y+4	; 0x04
    1088:	2a e0       	ldi	r18, 0x0A	; 10
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	b9 01       	movw	r22, r18
    108e:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__udivmodhi4>
    1092:	89 83       	std	Y+1, r24	; 0x01
			arr_Three_Digits[index] = mod ;
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	88 2f       	mov	r24, r24
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	fc 01       	movw	r30, r24
    109c:	ee 54       	subi	r30, 0x4E	; 78
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	80 83       	st	Z, r24
			Copy_u16DecNum /=10 ;
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	9c 81       	ldd	r25, Y+4	; 0x04
    10a8:	2a e0       	ldi	r18, 0x0A	; 10
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	b9 01       	movw	r22, r18
    10ae:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__udivmodhi4>
    10b2:	cb 01       	movw	r24, r22
    10b4:	9c 83       	std	Y+4, r25	; 0x04
    10b6:	8b 83       	std	Y+3, r24	; 0x03
			index ++ ;
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	8f 5f       	subi	r24, 0xFF	; 255
    10bc:	8a 83       	std	Y+2, r24	; 0x02
		CLCD_voidSendData(arr_Two_Digits[1] + '0') ;
		CLCD_voidSendData(arr_Two_Digits[0] + '0') ;
	}
	else if (Copy_u16DecNum > 99 && Copy_u16DecNum <= 999)
	{
		while (Copy_u16DecNum > 0)
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	9c 81       	ldd	r25, Y+4	; 0x04
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	f9 f6       	brne	.-66     	; 0x1084 <CLCD_write_Number+0x98>
			arr_Three_Digits[index] = mod ;
			Copy_u16DecNum /=10 ;
			index ++ ;
		}

		CLCD_voidSendData(arr_Three_Digits[2] + '0') ;
    10c6:	80 91 b4 00 	lds	r24, 0x00B4
    10ca:	80 5d       	subi	r24, 0xD0	; 208
    10cc:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		CLCD_voidSendData(arr_Three_Digits[1] + '0') ;
    10d0:	80 91 b3 00 	lds	r24, 0x00B3
    10d4:	80 5d       	subi	r24, 0xD0	; 208
    10d6:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		CLCD_voidSendData(arr_Three_Digits[0] + '0') ;
    10da:	80 91 b2 00 	lds	r24, 0x00B2
    10de:	80 5d       	subi	r24, 0xD0	; 208
    10e0:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    10e4:	4c c0       	rjmp	.+152    	; 0x117e <CLCD_write_Number+0x192>
	}
	else if (Copy_u16DecNum > 999 && Copy_u16DecNum <= 9999)
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	23 e0       	ldi	r18, 0x03	; 3
    10ec:	88 3e       	cpi	r24, 0xE8	; 232
    10ee:	92 07       	cpc	r25, r18
    10f0:	e8 f1       	brcs	.+122    	; 0x116c <CLCD_write_Number+0x180>
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	27 e2       	ldi	r18, 0x27	; 39
    10f8:	80 31       	cpi	r24, 0x10	; 16
    10fa:	92 07       	cpc	r25, r18
    10fc:	b8 f5       	brcc	.+110    	; 0x116c <CLCD_write_Number+0x180>
    10fe:	1d c0       	rjmp	.+58     	; 0x113a <CLCD_write_Number+0x14e>
	{
		while (Copy_u16DecNum > 0)
		{
			mod = Copy_u16DecNum  % 10 ;
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	2a e0       	ldi	r18, 0x0A	; 10
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	b9 01       	movw	r22, r18
    110a:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__udivmodhi4>
    110e:	89 83       	std	Y+1, r24	; 0x01
			arr_Four_Digits[index] = mod ;
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	88 2f       	mov	r24, r24
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	fc 01       	movw	r30, r24
    1118:	e2 55       	subi	r30, 0x52	; 82
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	80 83       	st	Z, r24
			Copy_u16DecNum /=10 ;
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	2a e0       	ldi	r18, 0x0A	; 10
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	b9 01       	movw	r22, r18
    112a:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__udivmodhi4>
    112e:	cb 01       	movw	r24, r22
    1130:	9c 83       	std	Y+4, r25	; 0x04
    1132:	8b 83       	std	Y+3, r24	; 0x03
			index ++ ;
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	8f 5f       	subi	r24, 0xFF	; 255
    1138:	8a 83       	std	Y+2, r24	; 0x02
		CLCD_voidSendData(arr_Three_Digits[1] + '0') ;
		CLCD_voidSendData(arr_Three_Digits[0] + '0') ;
	}
	else if (Copy_u16DecNum > 999 && Copy_u16DecNum <= 9999)
	{
		while (Copy_u16DecNum > 0)
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	f9 f6       	brne	.-66     	; 0x1100 <CLCD_write_Number+0x114>
			arr_Four_Digits[index] = mod ;
			Copy_u16DecNum /=10 ;
			index ++ ;
		}

		CLCD_voidSendData(arr_Four_Digits[3] + '0') ;
    1142:	80 91 b1 00 	lds	r24, 0x00B1
    1146:	80 5d       	subi	r24, 0xD0	; 208
    1148:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		CLCD_voidSendData(arr_Four_Digits[2] + '0') ;
    114c:	80 91 b0 00 	lds	r24, 0x00B0
    1150:	80 5d       	subi	r24, 0xD0	; 208
    1152:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		CLCD_voidSendData(arr_Four_Digits[1] + '0') ;
    1156:	80 91 af 00 	lds	r24, 0x00AF
    115a:	80 5d       	subi	r24, 0xD0	; 208
    115c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		CLCD_voidSendData(arr_Four_Digits[0] + '0') ;
    1160:	80 91 ae 00 	lds	r24, 0x00AE
    1164:	80 5d       	subi	r24, 0xD0	; 208
    1166:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    116a:	09 c0       	rjmp	.+18     	; 0x117e <CLCD_write_Number+0x192>
	}
	else if (Copy_u16DecNum >= 0 && Copy_u16DecNum <= 9)
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	8a 30       	cpi	r24, 0x0A	; 10
    1172:	91 05       	cpc	r25, r1
    1174:	20 f4       	brcc	.+8      	; 0x117e <CLCD_write_Number+0x192>
	{
		CLCD_voidSendData(Copy_u16DecNum + '0') ;
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	80 5d       	subi	r24, 0xD0	; 208
    117a:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	}
}
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <DIO_vidSetPinVal>:
#include "Bit_Math.h"
#include "DIO_Private.h"
#include "DIO_Interface.h"
/**************FUNCTION IMPLEMENTATION************/
void DIO_vidSetPinVal(u8 portId, u8 pinId, u8 val)
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	27 97       	sbiw	r28, 0x07	; 7
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	89 83       	std	Y+1, r24	; 0x01
    11a2:	6a 83       	std	Y+2, r22	; 0x02
    11a4:	4b 83       	std	Y+3, r20	; 0x03
	if ((portId <= DIO_PORTD) && (pinId <= DIO_PIN7))//the range is right
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	84 30       	cpi	r24, 0x04	; 4
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <DIO_vidSetPinVal+0x22>
    11ac:	ee c0       	rjmp	.+476    	; 0x138a <DIO_vidSetPinVal+0x1fe>
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	88 30       	cpi	r24, 0x08	; 8
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <DIO_vidSetPinVal+0x2a>
    11b4:	ea c0       	rjmp	.+468    	; 0x138a <DIO_vidSetPinVal+0x1fe>
	{ if (val == DIO_HIGH)
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	09 f0       	breq	.+2      	; 0x11be <DIO_vidSetPinVal+0x32>
    11bc:	6f c0       	rjmp	.+222    	; 0x129c <DIO_vidSetPinVal+0x110>
	{
		switch(portId)
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	3f 83       	std	Y+7, r19	; 0x07
    11c6:	2e 83       	std	Y+6, r18	; 0x06
    11c8:	8e 81       	ldd	r24, Y+6	; 0x06
    11ca:	9f 81       	ldd	r25, Y+7	; 0x07
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	91 05       	cpc	r25, r1
    11d0:	49 f1       	breq	.+82     	; 0x1224 <DIO_vidSetPinVal+0x98>
    11d2:	2e 81       	ldd	r18, Y+6	; 0x06
    11d4:	3f 81       	ldd	r19, Y+7	; 0x07
    11d6:	22 30       	cpi	r18, 0x02	; 2
    11d8:	31 05       	cpc	r19, r1
    11da:	2c f4       	brge	.+10     	; 0x11e6 <DIO_vidSetPinVal+0x5a>
    11dc:	8e 81       	ldd	r24, Y+6	; 0x06
    11de:	9f 81       	ldd	r25, Y+7	; 0x07
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	61 f0       	breq	.+24     	; 0x11fc <DIO_vidSetPinVal+0x70>
    11e4:	d2 c0       	rjmp	.+420    	; 0x138a <DIO_vidSetPinVal+0x1fe>
    11e6:	2e 81       	ldd	r18, Y+6	; 0x06
    11e8:	3f 81       	ldd	r19, Y+7	; 0x07
    11ea:	22 30       	cpi	r18, 0x02	; 2
    11ec:	31 05       	cpc	r19, r1
    11ee:	71 f1       	breq	.+92     	; 0x124c <DIO_vidSetPinVal+0xc0>
    11f0:	8e 81       	ldd	r24, Y+6	; 0x06
    11f2:	9f 81       	ldd	r25, Y+7	; 0x07
    11f4:	83 30       	cpi	r24, 0x03	; 3
    11f6:	91 05       	cpc	r25, r1
    11f8:	e9 f1       	breq	.+122    	; 0x1274 <DIO_vidSetPinVal+0xe8>
    11fa:	c7 c0       	rjmp	.+398    	; 0x138a <DIO_vidSetPinVal+0x1fe>
		{
		case DIO_PORTA: SET_BIT(pinId,PORTA_REG);break;
    11fc:	ab e3       	ldi	r26, 0x3B	; 59
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	eb e3       	ldi	r30, 0x3B	; 59
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 2e       	mov	r0, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <DIO_vidSetPinVal+0x8e>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <DIO_vidSetPinVal+0x8a>
    121e:	84 2b       	or	r24, r20
    1220:	8c 93       	st	X, r24
    1222:	b3 c0       	rjmp	.+358    	; 0x138a <DIO_vidSetPinVal+0x1fe>
		case DIO_PORTB: SET_BIT(pinId,PORTB_REG);break;
    1224:	a8 e3       	ldi	r26, 0x38	; 56
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e8 e3       	ldi	r30, 0x38	; 56
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_vidSetPinVal+0xb6>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_vidSetPinVal+0xb2>
    1246:	84 2b       	or	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	9f c0       	rjmp	.+318    	; 0x138a <DIO_vidSetPinVal+0x1fe>
		case DIO_PORTC: SET_BIT(pinId,PORTC_REG);break;
    124c:	a5 e3       	ldi	r26, 0x35	; 53
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e5 e3       	ldi	r30, 0x35	; 53
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_vidSetPinVal+0xde>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <DIO_vidSetPinVal+0xda>
    126e:	84 2b       	or	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	8b c0       	rjmp	.+278    	; 0x138a <DIO_vidSetPinVal+0x1fe>
		case DIO_PORTD: SET_BIT(pinId,PORTD_REG);break;
    1274:	a2 e3       	ldi	r26, 0x32	; 50
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e2 e3       	ldi	r30, 0x32	; 50
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_vidSetPinVal+0x106>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_vidSetPinVal+0x102>
    1296:	84 2b       	or	r24, r20
    1298:	8c 93       	st	X, r24
    129a:	77 c0       	rjmp	.+238    	; 0x138a <DIO_vidSetPinVal+0x1fe>
		}
	}
	else if (val == DIO_LOW)
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	88 23       	and	r24, r24
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <DIO_vidSetPinVal+0x118>
    12a2:	73 c0       	rjmp	.+230    	; 0x138a <DIO_vidSetPinVal+0x1fe>
	{
		switch(portId)
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	3d 83       	std	Y+5, r19	; 0x05
    12ac:	2c 83       	std	Y+4, r18	; 0x04
    12ae:	8c 81       	ldd	r24, Y+4	; 0x04
    12b0:	9d 81       	ldd	r25, Y+5	; 0x05
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	91 05       	cpc	r25, r1
    12b6:	59 f1       	breq	.+86     	; 0x130e <DIO_vidSetPinVal+0x182>
    12b8:	2c 81       	ldd	r18, Y+4	; 0x04
    12ba:	3d 81       	ldd	r19, Y+5	; 0x05
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	31 05       	cpc	r19, r1
    12c0:	2c f4       	brge	.+10     	; 0x12cc <DIO_vidSetPinVal+0x140>
    12c2:	8c 81       	ldd	r24, Y+4	; 0x04
    12c4:	9d 81       	ldd	r25, Y+5	; 0x05
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	69 f0       	breq	.+26     	; 0x12e4 <DIO_vidSetPinVal+0x158>
    12ca:	5f c0       	rjmp	.+190    	; 0x138a <DIO_vidSetPinVal+0x1fe>
    12cc:	2c 81       	ldd	r18, Y+4	; 0x04
    12ce:	3d 81       	ldd	r19, Y+5	; 0x05
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	89 f1       	breq	.+98     	; 0x1338 <DIO_vidSetPinVal+0x1ac>
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	83 30       	cpi	r24, 0x03	; 3
    12dc:	91 05       	cpc	r25, r1
    12de:	09 f4       	brne	.+2      	; 0x12e2 <DIO_vidSetPinVal+0x156>
    12e0:	40 c0       	rjmp	.+128    	; 0x1362 <DIO_vidSetPinVal+0x1d6>
    12e2:	53 c0       	rjmp	.+166    	; 0x138a <DIO_vidSetPinVal+0x1fe>
		{
		case DIO_PORTA: CLR_BIT(pinId,PORTA_REG);break;
    12e4:	ab e3       	ldi	r26, 0x3B	; 59
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	eb e3       	ldi	r30, 0x3B	; 59
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 2e       	mov	r0, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_vidSetPinVal+0x176>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	0a 94       	dec	r0
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_vidSetPinVal+0x172>
    1306:	80 95       	com	r24
    1308:	84 23       	and	r24, r20
    130a:	8c 93       	st	X, r24
    130c:	3e c0       	rjmp	.+124    	; 0x138a <DIO_vidSetPinVal+0x1fe>
		case DIO_PORTB: CLR_BIT(pinId,PORTB_REG);break;
    130e:	a8 e3       	ldi	r26, 0x38	; 56
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e8 e3       	ldi	r30, 0x38	; 56
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_vidSetPinVal+0x1a0>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_vidSetPinVal+0x19c>
    1330:	80 95       	com	r24
    1332:	84 23       	and	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	29 c0       	rjmp	.+82     	; 0x138a <DIO_vidSetPinVal+0x1fe>
		case DIO_PORTC: CLR_BIT(pinId,PORTC_REG);break;
    1338:	a5 e3       	ldi	r26, 0x35	; 53
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e5 e3       	ldi	r30, 0x35	; 53
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_vidSetPinVal+0x1ca>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_vidSetPinVal+0x1c6>
    135a:	80 95       	com	r24
    135c:	84 23       	and	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	14 c0       	rjmp	.+40     	; 0x138a <DIO_vidSetPinVal+0x1fe>
		case DIO_PORTD: CLR_BIT(pinId,PORTD_REG);break;
    1362:	a2 e3       	ldi	r26, 0x32	; 50
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e2 e3       	ldi	r30, 0x32	; 50
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <DIO_vidSetPinVal+0x1f4>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <DIO_vidSetPinVal+0x1f0>
    1384:	80 95       	com	r24
    1386:	84 23       	and	r24, r20
    1388:	8c 93       	st	X, r24
	else//for future development
	{
		// Report Error
	}

}
    138a:	27 96       	adiw	r28, 0x07	; 7
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <DIO_vidSetPinDir>:
void DIO_vidSetPinDir(u8 portId, u8 pinId, u8 dir)
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	27 97       	sbiw	r28, 0x07	; 7
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	6a 83       	std	Y+2, r22	; 0x02
    13b4:	4b 83       	std	Y+3, r20	; 0x03
	if ((portId <= DIO_PORTD) && (pinId <= DIO_PIN7))
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	84 30       	cpi	r24, 0x04	; 4
    13ba:	08 f0       	brcs	.+2      	; 0x13be <DIO_vidSetPinDir+0x22>
    13bc:	ee c0       	rjmp	.+476    	; 0x159a <DIO_vidSetPinDir+0x1fe>
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	88 30       	cpi	r24, 0x08	; 8
    13c2:	08 f0       	brcs	.+2      	; 0x13c6 <DIO_vidSetPinDir+0x2a>
    13c4:	ea c0       	rjmp	.+468    	; 0x159a <DIO_vidSetPinDir+0x1fe>
	{ if (dir == DIO_OUTPUT)
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	09 f0       	breq	.+2      	; 0x13ce <DIO_vidSetPinDir+0x32>
    13cc:	6f c0       	rjmp	.+222    	; 0x14ac <DIO_vidSetPinDir+0x110>
	{
		switch(portId)
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	3f 83       	std	Y+7, r19	; 0x07
    13d6:	2e 83       	std	Y+6, r18	; 0x06
    13d8:	8e 81       	ldd	r24, Y+6	; 0x06
    13da:	9f 81       	ldd	r25, Y+7	; 0x07
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	91 05       	cpc	r25, r1
    13e0:	49 f1       	breq	.+82     	; 0x1434 <DIO_vidSetPinDir+0x98>
    13e2:	2e 81       	ldd	r18, Y+6	; 0x06
    13e4:	3f 81       	ldd	r19, Y+7	; 0x07
    13e6:	22 30       	cpi	r18, 0x02	; 2
    13e8:	31 05       	cpc	r19, r1
    13ea:	2c f4       	brge	.+10     	; 0x13f6 <DIO_vidSetPinDir+0x5a>
    13ec:	8e 81       	ldd	r24, Y+6	; 0x06
    13ee:	9f 81       	ldd	r25, Y+7	; 0x07
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	61 f0       	breq	.+24     	; 0x140c <DIO_vidSetPinDir+0x70>
    13f4:	d2 c0       	rjmp	.+420    	; 0x159a <DIO_vidSetPinDir+0x1fe>
    13f6:	2e 81       	ldd	r18, Y+6	; 0x06
    13f8:	3f 81       	ldd	r19, Y+7	; 0x07
    13fa:	22 30       	cpi	r18, 0x02	; 2
    13fc:	31 05       	cpc	r19, r1
    13fe:	71 f1       	breq	.+92     	; 0x145c <DIO_vidSetPinDir+0xc0>
    1400:	8e 81       	ldd	r24, Y+6	; 0x06
    1402:	9f 81       	ldd	r25, Y+7	; 0x07
    1404:	83 30       	cpi	r24, 0x03	; 3
    1406:	91 05       	cpc	r25, r1
    1408:	e9 f1       	breq	.+122    	; 0x1484 <DIO_vidSetPinDir+0xe8>
    140a:	c7 c0       	rjmp	.+398    	; 0x159a <DIO_vidSetPinDir+0x1fe>
		{
		case DIO_PORTA: SET_BIT(pinId,DDRA_REG);break;
    140c:	aa e3       	ldi	r26, 0x3A	; 58
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ea e3       	ldi	r30, 0x3A	; 58
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_vidSetPinDir+0x8e>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_vidSetPinDir+0x8a>
    142e:	84 2b       	or	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	b3 c0       	rjmp	.+358    	; 0x159a <DIO_vidSetPinDir+0x1fe>
		case DIO_PORTB: SET_BIT(pinId,DDRB_REG);break;
    1434:	a7 e3       	ldi	r26, 0x37	; 55
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e7 e3       	ldi	r30, 0x37	; 55
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <DIO_vidSetPinDir+0xb6>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <DIO_vidSetPinDir+0xb2>
    1456:	84 2b       	or	r24, r20
    1458:	8c 93       	st	X, r24
    145a:	9f c0       	rjmp	.+318    	; 0x159a <DIO_vidSetPinDir+0x1fe>
		case DIO_PORTC: SET_BIT(pinId,DDRC_REG);break;
    145c:	a4 e3       	ldi	r26, 0x34	; 52
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e4 e3       	ldi	r30, 0x34	; 52
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <DIO_vidSetPinDir+0xde>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <DIO_vidSetPinDir+0xda>
    147e:	84 2b       	or	r24, r20
    1480:	8c 93       	st	X, r24
    1482:	8b c0       	rjmp	.+278    	; 0x159a <DIO_vidSetPinDir+0x1fe>
		case DIO_PORTD: SET_BIT(pinId,DDRD_REG);break;
    1484:	a1 e3       	ldi	r26, 0x31	; 49
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e1 e3       	ldi	r30, 0x31	; 49
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_vidSetPinDir+0x106>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_vidSetPinDir+0x102>
    14a6:	84 2b       	or	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	77 c0       	rjmp	.+238    	; 0x159a <DIO_vidSetPinDir+0x1fe>
		}
	}
	else if (dir == DIO_INPUT)
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	88 23       	and	r24, r24
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <DIO_vidSetPinDir+0x118>
    14b2:	73 c0       	rjmp	.+230    	; 0x159a <DIO_vidSetPinDir+0x1fe>
	{
		switch(portId)
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	3d 83       	std	Y+5, r19	; 0x05
    14bc:	2c 83       	std	Y+4, r18	; 0x04
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	9d 81       	ldd	r25, Y+5	; 0x05
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	91 05       	cpc	r25, r1
    14c6:	59 f1       	breq	.+86     	; 0x151e <DIO_vidSetPinDir+0x182>
    14c8:	2c 81       	ldd	r18, Y+4	; 0x04
    14ca:	3d 81       	ldd	r19, Y+5	; 0x05
    14cc:	22 30       	cpi	r18, 0x02	; 2
    14ce:	31 05       	cpc	r19, r1
    14d0:	2c f4       	brge	.+10     	; 0x14dc <DIO_vidSetPinDir+0x140>
    14d2:	8c 81       	ldd	r24, Y+4	; 0x04
    14d4:	9d 81       	ldd	r25, Y+5	; 0x05
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	69 f0       	breq	.+26     	; 0x14f4 <DIO_vidSetPinDir+0x158>
    14da:	5f c0       	rjmp	.+190    	; 0x159a <DIO_vidSetPinDir+0x1fe>
    14dc:	2c 81       	ldd	r18, Y+4	; 0x04
    14de:	3d 81       	ldd	r19, Y+5	; 0x05
    14e0:	22 30       	cpi	r18, 0x02	; 2
    14e2:	31 05       	cpc	r19, r1
    14e4:	89 f1       	breq	.+98     	; 0x1548 <DIO_vidSetPinDir+0x1ac>
    14e6:	8c 81       	ldd	r24, Y+4	; 0x04
    14e8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ea:	83 30       	cpi	r24, 0x03	; 3
    14ec:	91 05       	cpc	r25, r1
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <DIO_vidSetPinDir+0x156>
    14f0:	40 c0       	rjmp	.+128    	; 0x1572 <DIO_vidSetPinDir+0x1d6>
    14f2:	53 c0       	rjmp	.+166    	; 0x159a <DIO_vidSetPinDir+0x1fe>
		{
		case DIO_PORTA: CLR_BIT(pinId,DDRA_REG);break;
    14f4:	aa e3       	ldi	r26, 0x3A	; 58
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	ea e3       	ldi	r30, 0x3A	; 58
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <DIO_vidSetPinDir+0x176>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <DIO_vidSetPinDir+0x172>
    1516:	80 95       	com	r24
    1518:	84 23       	and	r24, r20
    151a:	8c 93       	st	X, r24
    151c:	3e c0       	rjmp	.+124    	; 0x159a <DIO_vidSetPinDir+0x1fe>
		case DIO_PORTB: CLR_BIT(pinId,DDRB_REG);break;
    151e:	a7 e3       	ldi	r26, 0x37	; 55
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e7 e3       	ldi	r30, 0x37	; 55
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_vidSetPinDir+0x1a0>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <DIO_vidSetPinDir+0x19c>
    1540:	80 95       	com	r24
    1542:	84 23       	and	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	29 c0       	rjmp	.+82     	; 0x159a <DIO_vidSetPinDir+0x1fe>
		case DIO_PORTC: CLR_BIT(pinId,DDRC_REG);break;
    1548:	a4 e3       	ldi	r26, 0x34	; 52
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e4 e3       	ldi	r30, 0x34	; 52
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_vidSetPinDir+0x1ca>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_vidSetPinDir+0x1c6>
    156a:	80 95       	com	r24
    156c:	84 23       	and	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	14 c0       	rjmp	.+40     	; 0x159a <DIO_vidSetPinDir+0x1fe>
		case DIO_PORTD: CLR_BIT(pinId,DDRD_REG);break;
    1572:	a1 e3       	ldi	r26, 0x31	; 49
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e1 e3       	ldi	r30, 0x31	; 49
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_vidSetPinDir+0x1f4>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_vidSetPinDir+0x1f0>
    1594:	80 95       	com	r24
    1596:	84 23       	and	r24, r20
    1598:	8c 93       	st	X, r24
	else
	{
		// Report Error
	}

}
    159a:	27 96       	adiw	r28, 0x07	; 7
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <DIO_vidSetPortVal>:
void DIO_vidSetPortVal(u8 portId, u8 portval)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <DIO_vidSetPortVal+0x6>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <DIO_vidSetPortVal+0x8>
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	6a 83       	std	Y+2, r22	; 0x02
	if (portId <= DIO_PORTD)
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	84 30       	cpi	r24, 0x04	; 4
    15c0:	90 f5       	brcc	.+100    	; 0x1626 <DIO_vidSetPortVal+0x7a>
	{
		switch(portId)
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	3c 83       	std	Y+4, r19	; 0x04
    15ca:	2b 83       	std	Y+3, r18	; 0x03
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	91 05       	cpc	r25, r1
    15d4:	d1 f0       	breq	.+52     	; 0x160a <DIO_vidSetPortVal+0x5e>
    15d6:	2b 81       	ldd	r18, Y+3	; 0x03
    15d8:	3c 81       	ldd	r19, Y+4	; 0x04
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	2c f4       	brge	.+10     	; 0x15ea <DIO_vidSetPortVal+0x3e>
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	61 f0       	breq	.+24     	; 0x1600 <DIO_vidSetPortVal+0x54>
    15e8:	1e c0       	rjmp	.+60     	; 0x1626 <DIO_vidSetPortVal+0x7a>
    15ea:	2b 81       	ldd	r18, Y+3	; 0x03
    15ec:	3c 81       	ldd	r19, Y+4	; 0x04
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	31 05       	cpc	r19, r1
    15f2:	81 f0       	breq	.+32     	; 0x1614 <DIO_vidSetPortVal+0x68>
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	83 30       	cpi	r24, 0x03	; 3
    15fa:	91 05       	cpc	r25, r1
    15fc:	81 f0       	breq	.+32     	; 0x161e <DIO_vidSetPortVal+0x72>
    15fe:	13 c0       	rjmp	.+38     	; 0x1626 <DIO_vidSetPortVal+0x7a>
		{
		case DIO_PORTA: PORTA_REG = portval;break;
    1600:	eb e3       	ldi	r30, 0x3B	; 59
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	80 83       	st	Z, r24
    1608:	0e c0       	rjmp	.+28     	; 0x1626 <DIO_vidSetPortVal+0x7a>
		case DIO_PORTB: PORTB_REG = portval;break;
    160a:	e8 e3       	ldi	r30, 0x38	; 56
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	80 83       	st	Z, r24
    1612:	09 c0       	rjmp	.+18     	; 0x1626 <DIO_vidSetPortVal+0x7a>
		case DIO_PORTC: PORTC_REG = portval;break;
    1614:	e5 e3       	ldi	r30, 0x35	; 53
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	80 83       	st	Z, r24
    161c:	04 c0       	rjmp	.+8      	; 0x1626 <DIO_vidSetPortVal+0x7a>
		case DIO_PORTD: PORTD_REG = portval;break;
    161e:	e2 e3       	ldi	r30, 0x32	; 50
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	80 83       	st	Z, r24
		}
	}
}
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <DIO_vidSetPortDir>:

void DIO_vidSetPortDir(u8 portId, u8 portdir)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <DIO_vidSetPortDir+0x6>
    163a:	00 d0       	rcall	.+0      	; 0x163c <DIO_vidSetPortDir+0x8>
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	6a 83       	std	Y+2, r22	; 0x02
	if (portId <= DIO_PORTD)
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	84 30       	cpi	r24, 0x04	; 4
    1648:	90 f5       	brcc	.+100    	; 0x16ae <DIO_vidSetPortDir+0x7a>
	{
		switch(portId)
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	3c 83       	std	Y+4, r19	; 0x04
    1652:	2b 83       	std	Y+3, r18	; 0x03
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	91 05       	cpc	r25, r1
    165c:	d1 f0       	breq	.+52     	; 0x1692 <DIO_vidSetPortDir+0x5e>
    165e:	2b 81       	ldd	r18, Y+3	; 0x03
    1660:	3c 81       	ldd	r19, Y+4	; 0x04
    1662:	22 30       	cpi	r18, 0x02	; 2
    1664:	31 05       	cpc	r19, r1
    1666:	2c f4       	brge	.+10     	; 0x1672 <DIO_vidSetPortDir+0x3e>
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	61 f0       	breq	.+24     	; 0x1688 <DIO_vidSetPortDir+0x54>
    1670:	1e c0       	rjmp	.+60     	; 0x16ae <DIO_vidSetPortDir+0x7a>
    1672:	2b 81       	ldd	r18, Y+3	; 0x03
    1674:	3c 81       	ldd	r19, Y+4	; 0x04
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	81 f0       	breq	.+32     	; 0x169c <DIO_vidSetPortDir+0x68>
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	83 30       	cpi	r24, 0x03	; 3
    1682:	91 05       	cpc	r25, r1
    1684:	81 f0       	breq	.+32     	; 0x16a6 <DIO_vidSetPortDir+0x72>
    1686:	13 c0       	rjmp	.+38     	; 0x16ae <DIO_vidSetPortDir+0x7a>
		{
		case DIO_PORTA: DDRA_REG = portdir;break;
    1688:	ea e3       	ldi	r30, 0x3A	; 58
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	80 83       	st	Z, r24
    1690:	0e c0       	rjmp	.+28     	; 0x16ae <DIO_vidSetPortDir+0x7a>
		case DIO_PORTB: DDRB_REG = portdir;break;
    1692:	e7 e3       	ldi	r30, 0x37	; 55
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	80 83       	st	Z, r24
    169a:	09 c0       	rjmp	.+18     	; 0x16ae <DIO_vidSetPortDir+0x7a>
		case DIO_PORTC: DDRC_REG = portdir;break;
    169c:	e4 e3       	ldi	r30, 0x34	; 52
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	80 83       	st	Z, r24
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <DIO_vidSetPortDir+0x7a>
		case DIO_PORTD: DDRD_REG = portdir;break;
    16a6:	e1 e3       	ldi	r30, 0x31	; 49
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	80 83       	st	Z, r24
		}
	}
}
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <DIO_u8GetPinVal>:

u8 DIO_u8GetPinVal(u8 portId, u8 pinId , u8 *Ret_val)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	27 97       	sbiw	r28, 0x07	; 7
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	8a 83       	std	Y+2, r24	; 0x02
    16d2:	6b 83       	std	Y+3, r22	; 0x03
    16d4:	5d 83       	std	Y+5, r21	; 0x05
    16d6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0 ;
    16d8:	19 82       	std	Y+1, r1	; 0x01

	if ((Ret_val != NULL) && (pinId <= DIO_PIN7))
    16da:	8c 81       	ldd	r24, Y+4	; 0x04
    16dc:	9d 81       	ldd	r25, Y+5	; 0x05
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <DIO_u8GetPinVal+0x28>
    16e2:	78 c0       	rjmp	.+240    	; 0x17d4 <DIO_u8GetPinVal+0x118>
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	88 30       	cpi	r24, 0x08	; 8
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <DIO_u8GetPinVal+0x30>
    16ea:	74 c0       	rjmp	.+232    	; 0x17d4 <DIO_u8GetPinVal+0x118>
	{
		switch(portId)
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	3f 83       	std	Y+7, r19	; 0x07
    16f4:	2e 83       	std	Y+6, r18	; 0x06
    16f6:	4e 81       	ldd	r20, Y+6	; 0x06
    16f8:	5f 81       	ldd	r21, Y+7	; 0x07
    16fa:	41 30       	cpi	r20, 0x01	; 1
    16fc:	51 05       	cpc	r21, r1
    16fe:	59 f1       	breq	.+86     	; 0x1756 <DIO_u8GetPinVal+0x9a>
    1700:	8e 81       	ldd	r24, Y+6	; 0x06
    1702:	9f 81       	ldd	r25, Y+7	; 0x07
    1704:	82 30       	cpi	r24, 0x02	; 2
    1706:	91 05       	cpc	r25, r1
    1708:	34 f4       	brge	.+12     	; 0x1716 <DIO_u8GetPinVal+0x5a>
    170a:	2e 81       	ldd	r18, Y+6	; 0x06
    170c:	3f 81       	ldd	r19, Y+7	; 0x07
    170e:	21 15       	cp	r18, r1
    1710:	31 05       	cpc	r19, r1
    1712:	69 f0       	breq	.+26     	; 0x172e <DIO_u8GetPinVal+0x72>
    1714:	5c c0       	rjmp	.+184    	; 0x17ce <DIO_u8GetPinVal+0x112>
    1716:	4e 81       	ldd	r20, Y+6	; 0x06
    1718:	5f 81       	ldd	r21, Y+7	; 0x07
    171a:	42 30       	cpi	r20, 0x02	; 2
    171c:	51 05       	cpc	r21, r1
    171e:	79 f1       	breq	.+94     	; 0x177e <DIO_u8GetPinVal+0xc2>
    1720:	8e 81       	ldd	r24, Y+6	; 0x06
    1722:	9f 81       	ldd	r25, Y+7	; 0x07
    1724:	83 30       	cpi	r24, 0x03	; 3
    1726:	91 05       	cpc	r25, r1
    1728:	09 f4       	brne	.+2      	; 0x172c <DIO_u8GetPinVal+0x70>
    172a:	3d c0       	rjmp	.+122    	; 0x17a6 <DIO_u8GetPinVal+0xea>
    172c:	50 c0       	rjmp	.+160    	; 0x17ce <DIO_u8GetPinVal+0x112>
		{
		case DIO_PORTA: *Ret_val = GET_BIT(pinId,PINA_REG);break;
    172e:	e9 e3       	ldi	r30, 0x39	; 57
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	a9 01       	movw	r20, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <DIO_u8GetPinVal+0x8a>
    1742:	55 95       	asr	r21
    1744:	47 95       	ror	r20
    1746:	8a 95       	dec	r24
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <DIO_u8GetPinVal+0x86>
    174a:	ca 01       	movw	r24, r20
    174c:	81 70       	andi	r24, 0x01	; 1
    174e:	ec 81       	ldd	r30, Y+4	; 0x04
    1750:	fd 81       	ldd	r31, Y+5	; 0x05
    1752:	80 83       	st	Z, r24
    1754:	41 c0       	rjmp	.+130    	; 0x17d8 <DIO_u8GetPinVal+0x11c>
		case DIO_PORTB: *Ret_val = GET_BIT(pinId,PINB_REG);break;
    1756:	e6 e3       	ldi	r30, 0x36	; 54
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	88 2f       	mov	r24, r24
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	a9 01       	movw	r20, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <DIO_u8GetPinVal+0xb2>
    176a:	55 95       	asr	r21
    176c:	47 95       	ror	r20
    176e:	8a 95       	dec	r24
    1770:	e2 f7       	brpl	.-8      	; 0x176a <DIO_u8GetPinVal+0xae>
    1772:	ca 01       	movw	r24, r20
    1774:	81 70       	andi	r24, 0x01	; 1
    1776:	ec 81       	ldd	r30, Y+4	; 0x04
    1778:	fd 81       	ldd	r31, Y+5	; 0x05
    177a:	80 83       	st	Z, r24
    177c:	2d c0       	rjmp	.+90     	; 0x17d8 <DIO_u8GetPinVal+0x11c>
		case DIO_PORTC: *Ret_val = GET_BIT(pinId,PINC_REG);break;
    177e:	e3 e3       	ldi	r30, 0x33	; 51
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a9 01       	movw	r20, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <DIO_u8GetPinVal+0xda>
    1792:	55 95       	asr	r21
    1794:	47 95       	ror	r20
    1796:	8a 95       	dec	r24
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <DIO_u8GetPinVal+0xd6>
    179a:	ca 01       	movw	r24, r20
    179c:	81 70       	andi	r24, 0x01	; 1
    179e:	ec 81       	ldd	r30, Y+4	; 0x04
    17a0:	fd 81       	ldd	r31, Y+5	; 0x05
    17a2:	80 83       	st	Z, r24
    17a4:	19 c0       	rjmp	.+50     	; 0x17d8 <DIO_u8GetPinVal+0x11c>
		case DIO_PORTD: *Ret_val = GET_BIT(pinId,PIND_REG);break;
    17a6:	e0 e3       	ldi	r30, 0x30	; 48
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	88 2f       	mov	r24, r24
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	a9 01       	movw	r20, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <DIO_u8GetPinVal+0x102>
    17ba:	55 95       	asr	r21
    17bc:	47 95       	ror	r20
    17be:	8a 95       	dec	r24
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <DIO_u8GetPinVal+0xfe>
    17c2:	ca 01       	movw	r24, r20
    17c4:	81 70       	andi	r24, 0x01	; 1
    17c6:	ec 81       	ldd	r30, Y+4	; 0x04
    17c8:	fd 81       	ldd	r31, Y+5	; 0x05
    17ca:	80 83       	st	Z, r24
    17cc:	05 c0       	rjmp	.+10     	; 0x17d8 <DIO_u8GetPinVal+0x11c>
		default : Local_u8ErrorState = 1 ;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <DIO_u8GetPinVal+0x11c>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17da:	27 96       	adiw	r28, 0x07	; 7
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <EXTI_Int2_Inti>:

	return Local_ErrorState ;
}
#elif EXTI_Int_Src == INT_2
void EXTI_Int2_Inti(void)
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62

#if INT2_sense == Falling_Edge
	CLR_BIT(ISC2 , MCUCSR);
    17f4:	a4 e5       	ldi	r26, 0x54	; 84
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e4 e5       	ldi	r30, 0x54	; 84
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	8f 7b       	andi	r24, 0xBF	; 191
    1800:	8c 93       	st	X, r24

#endif

	/*INT2 Enable*/
#if INT2_State == ENABLED
	SET_BIT(INT_2,GICR);
    1802:	ab e5       	ldi	r26, 0x5B	; 91
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	eb e5       	ldi	r30, 0x5B	; 91
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	80 62       	ori	r24, 0x20	; 32
    180e:	8c 93       	st	X, r24
#elif INT2_State == DISABLED
	CLR_BIT(INT_2,GICR);
#else
#error "Wrong State"
#endif
}
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <EXTI_INT0SetCallBack>:
#endif

u8 EXTI_INT0SetCallBack(void (*Copy_PvINT0Func)(void))
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	00 d0       	rcall	.+0      	; 0x181c <EXTI_INT0SetCallBack+0x6>
    181c:	0f 92       	push	r0
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	9b 83       	std	Y+3, r25	; 0x03
    1824:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_ErrorState = OK;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_PvINT0Func != NULL_Pointer)
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	9b 81       	ldd	r25, Y+3	; 0x03
    182e:	83 30       	cpi	r24, 0x03	; 3
    1830:	91 05       	cpc	r25, r1
    1832:	39 f0       	breq	.+14     	; 0x1842 <EXTI_INT0SetCallBack+0x2c>
	{
		EXTI_PvINT0Func = Copy_PvINT0Func;
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	9b 81       	ldd	r25, Y+3	; 0x03
    1838:	90 93 ab 00 	sts	0x00AB, r25
    183c:	80 93 aa 00 	sts	0x00AA, r24
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <EXTI_INT0SetCallBack+0x30>
	}
	else
	{
		Local_ErrorState = NULL_Pointer ;
    1842:	83 e0       	ldi	r24, 0x03	; 3
    1844:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState ;
    1846:	89 81       	ldd	r24, Y+1	; 0x01
}
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <EXTI_INT2SetCallBack>:


u8 EXTI_INT2SetCallBack(void (*Copy_PvINT2Func)(void))
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	00 d0       	rcall	.+0      	; 0x185a <EXTI_INT2SetCallBack+0x6>
    185a:	0f 92       	push	r0
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	9b 83       	std	Y+3, r25	; 0x03
    1862:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_ErrorState = OK;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_PvINT2Func != NULL_Pointer)
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	9b 81       	ldd	r25, Y+3	; 0x03
    186c:	83 30       	cpi	r24, 0x03	; 3
    186e:	91 05       	cpc	r25, r1
    1870:	39 f0       	breq	.+14     	; 0x1880 <EXTI_INT2SetCallBack+0x2c>
	{
		EXTI_PvINT2Func = Copy_PvINT2Func;
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	9b 81       	ldd	r25, Y+3	; 0x03
    1876:	90 93 ad 00 	sts	0x00AD, r25
    187a:	80 93 ac 00 	sts	0x00AC, r24
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <EXTI_INT2SetCallBack+0x30>
	}
	else
	{
		Local_ErrorState = NULL_Pointer ;
    1880:	83 e0       	ldi	r24, 0x03	; 3
    1882:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState ;
    1884:	89 81       	ldd	r24, Y+1	; 0x01
}
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <__vector_1>:


void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    1892:	1f 92       	push	r1
    1894:	0f 92       	push	r0
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	0f 92       	push	r0
    189a:	11 24       	eor	r1, r1
    189c:	2f 93       	push	r18
    189e:	3f 93       	push	r19
    18a0:	4f 93       	push	r20
    18a2:	5f 93       	push	r21
    18a4:	6f 93       	push	r22
    18a6:	7f 93       	push	r23
    18a8:	8f 93       	push	r24
    18aa:	9f 93       	push	r25
    18ac:	af 93       	push	r26
    18ae:	bf 93       	push	r27
    18b0:	ef 93       	push	r30
    18b2:	ff 93       	push	r31
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_PvINT0Func != NULL_Pointer)
    18bc:	80 91 aa 00 	lds	r24, 0x00AA
    18c0:	90 91 ab 00 	lds	r25, 0x00AB
    18c4:	83 30       	cpi	r24, 0x03	; 3
    18c6:	91 05       	cpc	r25, r1
    18c8:	29 f0       	breq	.+10     	; 0x18d4 <__vector_1+0x42>
	{
		EXTI_PvINT0Func();
    18ca:	e0 91 aa 00 	lds	r30, 0x00AA
    18ce:	f0 91 ab 00 	lds	r31, 0x00AB
    18d2:	09 95       	icall
	}
	else
	{
		/*Do no thing*/
	}
}
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	ff 91       	pop	r31
    18da:	ef 91       	pop	r30
    18dc:	bf 91       	pop	r27
    18de:	af 91       	pop	r26
    18e0:	9f 91       	pop	r25
    18e2:	8f 91       	pop	r24
    18e4:	7f 91       	pop	r23
    18e6:	6f 91       	pop	r22
    18e8:	5f 91       	pop	r21
    18ea:	4f 91       	pop	r20
    18ec:	3f 91       	pop	r19
    18ee:	2f 91       	pop	r18
    18f0:	0f 90       	pop	r0
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	0f 90       	pop	r0
    18f6:	1f 90       	pop	r1
    18f8:	18 95       	reti

000018fa <__vector_3>:

void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    18fa:	1f 92       	push	r1
    18fc:	0f 92       	push	r0
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	0f 92       	push	r0
    1902:	11 24       	eor	r1, r1
    1904:	2f 93       	push	r18
    1906:	3f 93       	push	r19
    1908:	4f 93       	push	r20
    190a:	5f 93       	push	r21
    190c:	6f 93       	push	r22
    190e:	7f 93       	push	r23
    1910:	8f 93       	push	r24
    1912:	9f 93       	push	r25
    1914:	af 93       	push	r26
    1916:	bf 93       	push	r27
    1918:	ef 93       	push	r30
    191a:	ff 93       	push	r31
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_PvINT2Func != NULL_Pointer)
    1924:	80 91 ac 00 	lds	r24, 0x00AC
    1928:	90 91 ad 00 	lds	r25, 0x00AD
    192c:	83 30       	cpi	r24, 0x03	; 3
    192e:	91 05       	cpc	r25, r1
    1930:	29 f0       	breq	.+10     	; 0x193c <__vector_3+0x42>
	{
		EXTI_PvINT2Func();
    1932:	e0 91 ac 00 	lds	r30, 0x00AC
    1936:	f0 91 ad 00 	lds	r31, 0x00AD
    193a:	09 95       	icall
	}
	else
	{
		/*Do no thing*/
	}
}
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	ff 91       	pop	r31
    1942:	ef 91       	pop	r30
    1944:	bf 91       	pop	r27
    1946:	af 91       	pop	r26
    1948:	9f 91       	pop	r25
    194a:	8f 91       	pop	r24
    194c:	7f 91       	pop	r23
    194e:	6f 91       	pop	r22
    1950:	5f 91       	pop	r21
    1952:	4f 91       	pop	r20
    1954:	3f 91       	pop	r19
    1956:	2f 91       	pop	r18
    1958:	0f 90       	pop	r0
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	0f 90       	pop	r0
    195e:	1f 90       	pop	r1
    1960:	18 95       	reti

00001962 <Garage_System_Init>:
#include "avr/delay.h"

void ISR(void);

void Garage_System_Init(void)
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
	/*Set Data Port As Output*/
	DIO_vidSetPortDir(DIO_PORTC , 0b11111111);
    196a:	82 e0       	ldi	r24, 0x02	; 2
    196c:	6f ef       	ldi	r22, 0xFF	; 255
    196e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <DIO_vidSetPortDir>
	/*Set Control Port As Output*/
	DIO_vidSetPinDir(DIO_PORTA , DIO_PIN2 , DIO_OUTPUT);
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	62 e0       	ldi	r22, 0x02	; 2
    1976:	41 e0       	ldi	r20, 0x01	; 1
    1978:	0e 94 ce 09 	call	0x139c	; 0x139c <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DIO_PORTA , DIO_PIN3 , DIO_OUTPUT);
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	63 e0       	ldi	r22, 0x03	; 3
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	0e 94 ce 09 	call	0x139c	; 0x139c <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DIO_PORTA , DIO_PIN4 , DIO_OUTPUT);
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	64 e0       	ldi	r22, 0x04	; 4
    198a:	41 e0       	ldi	r20, 0x01	; 1
    198c:	0e 94 ce 09 	call	0x139c	; 0x139c <DIO_vidSetPinDir>

	/*Make Entry Push Button Pin PINB2 as Input*/
	DIO_vidSetPinDir(DIO_PORTB, DIO_PIN2 , DIO_INPUT);
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	62 e0       	ldi	r22, 0x02	; 2
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	0e 94 ce 09 	call	0x139c	; 0x139c <DIO_vidSetPinDir>
	/*Enable Pull Up Resistor*/
	DIO_vidSetPinVal(DIO_PORTB, DIO_PIN2 , DIO_HIGH);
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	62 e0       	ldi	r22, 0x02	; 2
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>

	/*Make Exit Push Button Pin PIND2 as Input*/
	DIO_vidSetPinDir(DIO_PORTD, DIO_PIN2 , DIO_INPUT);
    19a4:	83 e0       	ldi	r24, 0x03	; 3
    19a6:	62 e0       	ldi	r22, 0x02	; 2
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	0e 94 ce 09 	call	0x139c	; 0x139c <DIO_vidSetPinDir>
	/*Enable Pull Up Resistor*/
	DIO_vidSetPinVal(DIO_PORTD, DIO_PIN2 , DIO_HIGH);
    19ae:	83 e0       	ldi	r24, 0x03	; 3
    19b0:	62 e0       	ldi	r22, 0x02	; 2
    19b2:	41 e0       	ldi	r20, 0x01	; 1
    19b4:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>

	CLCD_voidInit();
    19b8:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidInit>
	Timer1_FastPWM_Mode();
    19bc:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <Timer1_FastPWM_Mode>
	SetTimer1_ICRval(20000);
    19c0:	80 e2       	ldi	r24, 0x20	; 32
    19c2:	9e e4       	ldi	r25, 0x4E	; 78
    19c4:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <SetTimer1_ICRval>
	//EXTI_Int2_Inti();
	//EXTI_INT2SetCallBack(&ISR);
	//Enable_Global_Interrupt();
}
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <Garage_System_Start>:


void Garage_System_Start(void)
{
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	c2 5b       	subi	r28, 0xB2	; 178
    19dc:	d0 40       	sbci	r29, 0x00	; 0
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8EntryPinVal ;
	u8 Local_u8ExitPinVal ;
	static u8 Local_u8NumberOfCars = 0 ;

	CLCD_vidSendString("There Are 0 Cars");
    19e8:	80 e6       	ldi	r24, 0x60	; 96
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
	CLCD_GoToXY(1,0);
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
	CLCD_vidSendString("Garage Has Space");
    19f8:	81 e7       	ldi	r24, 0x71	; 113
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>

	while (1)
	{
		DIO_u8GetPinVal(DIO_PORTD , DIO_PIN2 ,&Local_u8EntryPinVal) ; /*For Entry Gate*/
    1a00:	9e 01       	movw	r18, r28
    1a02:	2f 54       	subi	r18, 0x4F	; 79
    1a04:	3f 4f       	sbci	r19, 0xFF	; 255
    1a06:	83 e0       	ldi	r24, 0x03	; 3
    1a08:	62 e0       	ldi	r22, 0x02	; 2
    1a0a:	a9 01       	movw	r20, r18
    1a0c:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <DIO_u8GetPinVal>

		DIO_u8GetPinVal(DIO_PORTB , DIO_PIN2 ,&Local_u8ExitPinVal) ; /*For Close Gate*/
    1a10:	9e 01       	movw	r18, r28
    1a12:	2e 54       	subi	r18, 0x4E	; 78
    1a14:	3f 4f       	sbci	r19, 0xFF	; 255
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	62 e0       	ldi	r22, 0x02	; 2
    1a1a:	a9 01       	movw	r20, r18
    1a1c:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <DIO_u8GetPinVal>

		if (Local_u8EntryPinVal == 0 && Local_u8NumberOfCars <3) /*Pin Of Entry Gate*/
    1a20:	fe 01       	movw	r30, r28
    1a22:	ef 54       	subi	r30, 0x4F	; 79
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	80 81       	ld	r24, Z
    1a28:	88 23       	and	r24, r24
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <Garage_System_Start+0x60>
    1a2c:	df c4       	rjmp	.+2494   	; 0x23ec <Garage_System_Start+0xa1e>
    1a2e:	80 91 b7 00 	lds	r24, 0x00B7
    1a32:	83 30       	cpi	r24, 0x03	; 3
    1a34:	08 f0       	brcs	.+2      	; 0x1a38 <Garage_System_Start+0x6a>
    1a36:	da c4       	rjmp	.+2484   	; 0x23ec <Garage_System_Start+0xa1e>
		{
			Local_u8NumberOfCars ++ ; /*Number OF Cars*/
    1a38:	80 91 b7 00 	lds	r24, 0x00B7
    1a3c:	8f 5f       	subi	r24, 0xFF	; 255
    1a3e:	80 93 b7 00 	sts	0x00B7, r24

			CLCD_voidSendCommand(1) ;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
			CLCD_vidSendString("There Are ") ;
    1a48:	82 e8       	ldi	r24, 0x82	; 130
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
			CLCD_GoToXY(0,10) ;
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	6a e0       	ldi	r22, 0x0A	; 10
    1a54:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_write_Number(Local_u8NumberOfCars);
    1a58:	80 91 b7 00 	lds	r24, 0x00B7
    1a5c:	88 2f       	mov	r24, r24
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_write_Number>
			CLCD_GoToXY(0,11);
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	6b e0       	ldi	r22, 0x0B	; 11
    1a68:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_vidSendString(" Cars") ;
    1a6c:	8d e8       	ldi	r24, 0x8D	; 141
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
			if (Local_u8NumberOfCars == 3)
    1a74:	80 91 b7 00 	lds	r24, 0x00B7
    1a78:	83 30       	cpi	r24, 0x03	; 3
    1a7a:	09 f0       	breq	.+2      	; 0x1a7e <Garage_System_Start+0xb0>
    1a7c:	5c c2       	rjmp	.+1208   	; 0x1f36 <Garage_System_Start+0x568>
			{
				CLCD_GoToXY(1,0);
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_vidSendString("Garage Is Full");
    1a86:	83 e9       	ldi	r24, 0x93	; 147
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
				for(u8 i=0 ; i<=90 ; i++) /*Open Entry Gate*/
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e0 55       	subi	r30, 0x50	; 80
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	10 82       	st	Z, r1
    1a96:	c3 c0       	rjmp	.+390    	; 0x1c1e <Garage_System_Start+0x250>
				{
					Servo_Rotete(OCB , i);
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e0 55       	subi	r30, 0x50	; 80
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	83 e0       	ldi	r24, 0x03	; 3
    1aa0:	60 81       	ld	r22, Z
    1aa2:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <Servo_Rotete>
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	eb 55       	subi	r30, 0x5B	; 91
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	a0 e2       	ldi	r26, 0x20	; 32
    1ab2:	b1 e4       	ldi	r27, 0x41	; 65
    1ab4:	80 83       	st	Z, r24
    1ab6:	91 83       	std	Z+1, r25	; 0x01
    1ab8:	a2 83       	std	Z+2, r26	; 0x02
    1aba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abc:	8e 01       	movw	r16, r28
    1abe:	0f 55       	subi	r16, 0x5F	; 95
    1ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	eb 55       	subi	r30, 0x5B	; 91
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	60 81       	ld	r22, Z
    1aca:	71 81       	ldd	r23, Z+1	; 0x01
    1acc:	82 81       	ldd	r24, Z+2	; 0x02
    1ace:	93 81       	ldd	r25, Z+3	; 0x03
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	4a ef       	ldi	r20, 0xFA	; 250
    1ad6:	54 e4       	ldi	r21, 0x44	; 68
    1ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	f8 01       	movw	r30, r16
    1ae2:	80 83       	st	Z, r24
    1ae4:	91 83       	std	Z+1, r25	; 0x01
    1ae6:	a2 83       	std	Z+2, r26	; 0x02
    1ae8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aea:	fe 01       	movw	r30, r28
    1aec:	ef 55       	subi	r30, 0x5F	; 95
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	60 81       	ld	r22, Z
    1af2:	71 81       	ldd	r23, Z+1	; 0x01
    1af4:	82 81       	ldd	r24, Z+2	; 0x02
    1af6:	93 81       	ldd	r25, Z+3	; 0x03
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e8       	ldi	r20, 0x80	; 128
    1afe:	5f e3       	ldi	r21, 0x3F	; 63
    1b00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b04:	88 23       	and	r24, r24
    1b06:	44 f4       	brge	.+16     	; 0x1b18 <Garage_System_Start+0x14a>
		__ticks = 1;
    1b08:	fe 01       	movw	r30, r28
    1b0a:	e1 56       	subi	r30, 0x61	; 97
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	80 83       	st	Z, r24
    1b16:	64 c0       	rjmp	.+200    	; 0x1be0 <Garage_System_Start+0x212>
	else if (__tmp > 65535)
    1b18:	fe 01       	movw	r30, r28
    1b1a:	ef 55       	subi	r30, 0x5F	; 95
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	60 81       	ld	r22, Z
    1b20:	71 81       	ldd	r23, Z+1	; 0x01
    1b22:	82 81       	ldd	r24, Z+2	; 0x02
    1b24:	93 81       	ldd	r25, Z+3	; 0x03
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	3f ef       	ldi	r19, 0xFF	; 255
    1b2a:	4f e7       	ldi	r20, 0x7F	; 127
    1b2c:	57 e4       	ldi	r21, 0x47	; 71
    1b2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b32:	18 16       	cp	r1, r24
    1b34:	0c f0       	brlt	.+2      	; 0x1b38 <Garage_System_Start+0x16a>
    1b36:	43 c0       	rjmp	.+134    	; 0x1bbe <Garage_System_Start+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b38:	fe 01       	movw	r30, r28
    1b3a:	eb 55       	subi	r30, 0x5B	; 91
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	60 81       	ld	r22, Z
    1b40:	71 81       	ldd	r23, Z+1	; 0x01
    1b42:	82 81       	ldd	r24, Z+2	; 0x02
    1b44:	93 81       	ldd	r25, Z+3	; 0x03
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e2       	ldi	r20, 0x20	; 32
    1b4c:	51 e4       	ldi	r21, 0x41	; 65
    1b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	8e 01       	movw	r16, r28
    1b58:	01 56       	subi	r16, 0x61	; 97
    1b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5c:	bc 01       	movw	r22, r24
    1b5e:	cd 01       	movw	r24, r26
    1b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	f8 01       	movw	r30, r16
    1b6a:	91 83       	std	Z+1, r25	; 0x01
    1b6c:	80 83       	st	Z, r24
    1b6e:	1f c0       	rjmp	.+62     	; 0x1bae <Garage_System_Start+0x1e0>
    1b70:	fe 01       	movw	r30, r28
    1b72:	e3 56       	subi	r30, 0x63	; 99
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	88 ec       	ldi	r24, 0xC8	; 200
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	91 83       	std	Z+1, r25	; 0x01
    1b7c:	80 83       	st	Z, r24
    1b7e:	fe 01       	movw	r30, r28
    1b80:	e3 56       	subi	r30, 0x63	; 99
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	80 81       	ld	r24, Z
    1b86:	91 81       	ldd	r25, Z+1	; 0x01
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <Garage_System_Start+0x1ba>
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	e3 56       	subi	r30, 0x63	; 99
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	91 83       	std	Z+1, r25	; 0x01
    1b94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b96:	de 01       	movw	r26, r28
    1b98:	a1 56       	subi	r26, 0x61	; 97
    1b9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e1 56       	subi	r30, 0x61	; 97
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	80 81       	ld	r24, Z
    1ba4:	91 81       	ldd	r25, Z+1	; 0x01
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	11 96       	adiw	r26, 0x01	; 1
    1baa:	9c 93       	st	X, r25
    1bac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e1 56       	subi	r30, 0x61	; 97
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	80 81       	ld	r24, Z
    1bb6:	91 81       	ldd	r25, Z+1	; 0x01
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	d1 f6       	brne	.-76     	; 0x1b70 <Garage_System_Start+0x1a2>
    1bbc:	27 c0       	rjmp	.+78     	; 0x1c0c <Garage_System_Start+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bbe:	8e 01       	movw	r16, r28
    1bc0:	01 56       	subi	r16, 0x61	; 97
    1bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	ef 55       	subi	r30, 0x5F	; 95
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	60 81       	ld	r22, Z
    1bcc:	71 81       	ldd	r23, Z+1	; 0x01
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	f8 01       	movw	r30, r16
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	80 83       	st	Z, r24
    1be0:	de 01       	movw	r26, r28
    1be2:	a5 56       	subi	r26, 0x65	; 101
    1be4:	bf 4f       	sbci	r27, 0xFF	; 255
    1be6:	fe 01       	movw	r30, r28
    1be8:	e1 56       	subi	r30, 0x61	; 97
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	80 81       	ld	r24, Z
    1bee:	91 81       	ldd	r25, Z+1	; 0x01
    1bf0:	8d 93       	st	X+, r24
    1bf2:	9c 93       	st	X, r25
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e5 56       	subi	r30, 0x65	; 101
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	80 81       	ld	r24, Z
    1bfc:	91 81       	ldd	r25, Z+1	; 0x01
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <Garage_System_Start+0x230>
    1c02:	fe 01       	movw	r30, r28
    1c04:	e5 56       	subi	r30, 0x65	; 101
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	91 83       	std	Z+1, r25	; 0x01
    1c0a:	80 83       	st	Z, r24
			CLCD_vidSendString(" Cars") ;
			if (Local_u8NumberOfCars == 3)
			{
				CLCD_GoToXY(1,0);
				CLCD_vidSendString("Garage Is Full");
				for(u8 i=0 ; i<=90 ; i++) /*Open Entry Gate*/
    1c0c:	de 01       	movw	r26, r28
    1c0e:	a0 55       	subi	r26, 0x50	; 80
    1c10:	bf 4f       	sbci	r27, 0xFF	; 255
    1c12:	fe 01       	movw	r30, r28
    1c14:	e0 55       	subi	r30, 0x50	; 80
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	80 81       	ld	r24, Z
    1c1a:	8f 5f       	subi	r24, 0xFF	; 255
    1c1c:	8c 93       	st	X, r24
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e0 55       	subi	r30, 0x50	; 80
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	80 81       	ld	r24, Z
    1c26:	8b 35       	cpi	r24, 0x5B	; 91
    1c28:	08 f4       	brcc	.+2      	; 0x1c2c <Garage_System_Start+0x25e>
    1c2a:	36 cf       	rjmp	.-404    	; 0x1a98 <Garage_System_Start+0xca>
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	e9 56       	subi	r30, 0x69	; 105
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	aa e7       	ldi	r26, 0x7A	; 122
    1c38:	b4 e4       	ldi	r27, 0x44	; 68
    1c3a:	80 83       	st	Z, r24
    1c3c:	91 83       	std	Z+1, r25	; 0x01
    1c3e:	a2 83       	std	Z+2, r26	; 0x02
    1c40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c42:	8e 01       	movw	r16, r28
    1c44:	0d 56       	subi	r16, 0x6D	; 109
    1c46:	1f 4f       	sbci	r17, 0xFF	; 255
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e9 56       	subi	r30, 0x69	; 105
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	60 81       	ld	r22, Z
    1c50:	71 81       	ldd	r23, Z+1	; 0x01
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	93 81       	ldd	r25, Z+3	; 0x03
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	4a ef       	ldi	r20, 0xFA	; 250
    1c5c:	54 e4       	ldi	r21, 0x44	; 68
    1c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	f8 01       	movw	r30, r16
    1c68:	80 83       	st	Z, r24
    1c6a:	91 83       	std	Z+1, r25	; 0x01
    1c6c:	a2 83       	std	Z+2, r26	; 0x02
    1c6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c70:	fe 01       	movw	r30, r28
    1c72:	ed 56       	subi	r30, 0x6D	; 109
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e8       	ldi	r20, 0x80	; 128
    1c84:	5f e3       	ldi	r21, 0x3F	; 63
    1c86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c8a:	88 23       	and	r24, r24
    1c8c:	44 f4       	brge	.+16     	; 0x1c9e <Garage_System_Start+0x2d0>
		__ticks = 1;
    1c8e:	fe 01       	movw	r30, r28
    1c90:	ef 56       	subi	r30, 0x6F	; 111
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	91 83       	std	Z+1, r25	; 0x01
    1c9a:	80 83       	st	Z, r24
    1c9c:	64 c0       	rjmp	.+200    	; 0x1d66 <Garage_System_Start+0x398>
	else if (__tmp > 65535)
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	ed 56       	subi	r30, 0x6D	; 109
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	60 81       	ld	r22, Z
    1ca6:	71 81       	ldd	r23, Z+1	; 0x01
    1ca8:	82 81       	ldd	r24, Z+2	; 0x02
    1caa:	93 81       	ldd	r25, Z+3	; 0x03
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	3f ef       	ldi	r19, 0xFF	; 255
    1cb0:	4f e7       	ldi	r20, 0x7F	; 127
    1cb2:	57 e4       	ldi	r21, 0x47	; 71
    1cb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb8:	18 16       	cp	r1, r24
    1cba:	0c f0       	brlt	.+2      	; 0x1cbe <Garage_System_Start+0x2f0>
    1cbc:	43 c0       	rjmp	.+134    	; 0x1d44 <Garage_System_Start+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e9 56       	subi	r30, 0x69	; 105
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	60 81       	ld	r22, Z
    1cc6:	71 81       	ldd	r23, Z+1	; 0x01
    1cc8:	82 81       	ldd	r24, Z+2	; 0x02
    1cca:	93 81       	ldd	r25, Z+3	; 0x03
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e2       	ldi	r20, 0x20	; 32
    1cd2:	51 e4       	ldi	r21, 0x41	; 65
    1cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	8e 01       	movw	r16, r28
    1cde:	0f 56       	subi	r16, 0x6F	; 111
    1ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce2:	bc 01       	movw	r22, r24
    1ce4:	cd 01       	movw	r24, r26
    1ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	f8 01       	movw	r30, r16
    1cf0:	91 83       	std	Z+1, r25	; 0x01
    1cf2:	80 83       	st	Z, r24
    1cf4:	1f c0       	rjmp	.+62     	; 0x1d34 <Garage_System_Start+0x366>
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e1 57       	subi	r30, 0x71	; 113
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	88 ec       	ldi	r24, 0xC8	; 200
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	91 83       	std	Z+1, r25	; 0x01
    1d02:	80 83       	st	Z, r24
    1d04:	fe 01       	movw	r30, r28
    1d06:	e1 57       	subi	r30, 0x71	; 113
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	80 81       	ld	r24, Z
    1d0c:	91 81       	ldd	r25, Z+1	; 0x01
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <Garage_System_Start+0x340>
    1d12:	fe 01       	movw	r30, r28
    1d14:	e1 57       	subi	r30, 0x71	; 113
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	91 83       	std	Z+1, r25	; 0x01
    1d1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1c:	de 01       	movw	r26, r28
    1d1e:	af 56       	subi	r26, 0x6F	; 111
    1d20:	bf 4f       	sbci	r27, 0xFF	; 255
    1d22:	fe 01       	movw	r30, r28
    1d24:	ef 56       	subi	r30, 0x6F	; 111
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	80 81       	ld	r24, Z
    1d2a:	91 81       	ldd	r25, Z+1	; 0x01
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	11 96       	adiw	r26, 0x01	; 1
    1d30:	9c 93       	st	X, r25
    1d32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d34:	fe 01       	movw	r30, r28
    1d36:	ef 56       	subi	r30, 0x6F	; 111
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 81       	ld	r24, Z
    1d3c:	91 81       	ldd	r25, Z+1	; 0x01
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	d1 f6       	brne	.-76     	; 0x1cf6 <Garage_System_Start+0x328>
    1d42:	28 c0       	rjmp	.+80     	; 0x1d94 <Garage_System_Start+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d44:	8e 01       	movw	r16, r28
    1d46:	0f 56       	subi	r16, 0x6F	; 111
    1d48:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	ed 56       	subi	r30, 0x6D	; 109
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	60 81       	ld	r22, Z
    1d52:	71 81       	ldd	r23, Z+1	; 0x01
    1d54:	82 81       	ldd	r24, Z+2	; 0x02
    1d56:	93 81       	ldd	r25, Z+3	; 0x03
    1d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	f8 01       	movw	r30, r16
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	80 83       	st	Z, r24
    1d66:	de 01       	movw	r26, r28
    1d68:	a3 57       	subi	r26, 0x73	; 115
    1d6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	ef 56       	subi	r30, 0x6F	; 111
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 81       	ld	r24, Z
    1d74:	91 81       	ldd	r25, Z+1	; 0x01
    1d76:	11 96       	adiw	r26, 0x01	; 1
    1d78:	9c 93       	st	X, r25
    1d7a:	8e 93       	st	-X, r24
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	e3 57       	subi	r30, 0x73	; 115
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	80 81       	ld	r24, Z
    1d84:	91 81       	ldd	r25, Z+1	; 0x01
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <Garage_System_Start+0x3b8>
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	e3 57       	subi	r30, 0x73	; 115
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	91 83       	std	Z+1, r25	; 0x01
    1d92:	80 83       	st	Z, r24
				{
					Servo_Rotete(OCB , i);
					_delay_ms(10);
				}
				_delay_ms(1000);
				for(u8 i=89 ; i>0 ; i--) /*Close Entry Gate*/
    1d94:	fe 01       	movw	r30, r28
    1d96:	e1 55       	subi	r30, 0x51	; 81
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	89 e5       	ldi	r24, 0x59	; 89
    1d9c:	80 83       	st	Z, r24
    1d9e:	c3 c0       	rjmp	.+390    	; 0x1f26 <Garage_System_Start+0x558>
				{
					Servo_Rotete(OCB , i);
    1da0:	fe 01       	movw	r30, r28
    1da2:	e1 55       	subi	r30, 0x51	; 81
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	83 e0       	ldi	r24, 0x03	; 3
    1da8:	60 81       	ld	r22, Z
    1daa:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <Servo_Rotete>
    1dae:	fe 01       	movw	r30, r28
    1db0:	e7 57       	subi	r30, 0x77	; 119
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a0 e2       	ldi	r26, 0x20	; 32
    1dba:	b1 e4       	ldi	r27, 0x41	; 65
    1dbc:	80 83       	st	Z, r24
    1dbe:	91 83       	std	Z+1, r25	; 0x01
    1dc0:	a2 83       	std	Z+2, r26	; 0x02
    1dc2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc4:	8e 01       	movw	r16, r28
    1dc6:	0b 57       	subi	r16, 0x7B	; 123
    1dc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dca:	fe 01       	movw	r30, r28
    1dcc:	e7 57       	subi	r30, 0x77	; 119
    1dce:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd0:	60 81       	ld	r22, Z
    1dd2:	71 81       	ldd	r23, Z+1	; 0x01
    1dd4:	82 81       	ldd	r24, Z+2	; 0x02
    1dd6:	93 81       	ldd	r25, Z+3	; 0x03
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	4a ef       	ldi	r20, 0xFA	; 250
    1dde:	54 e4       	ldi	r21, 0x44	; 68
    1de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	f8 01       	movw	r30, r16
    1dea:	80 83       	st	Z, r24
    1dec:	91 83       	std	Z+1, r25	; 0x01
    1dee:	a2 83       	std	Z+2, r26	; 0x02
    1df0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1df2:	fe 01       	movw	r30, r28
    1df4:	eb 57       	subi	r30, 0x7B	; 123
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	60 81       	ld	r22, Z
    1dfa:	71 81       	ldd	r23, Z+1	; 0x01
    1dfc:	82 81       	ldd	r24, Z+2	; 0x02
    1dfe:	93 81       	ldd	r25, Z+3	; 0x03
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e8       	ldi	r20, 0x80	; 128
    1e06:	5f e3       	ldi	r21, 0x3F	; 63
    1e08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e0c:	88 23       	and	r24, r24
    1e0e:	44 f4       	brge	.+16     	; 0x1e20 <Garage_System_Start+0x452>
		__ticks = 1;
    1e10:	fe 01       	movw	r30, r28
    1e12:	ed 57       	subi	r30, 0x7D	; 125
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	91 83       	std	Z+1, r25	; 0x01
    1e1c:	80 83       	st	Z, r24
    1e1e:	64 c0       	rjmp	.+200    	; 0x1ee8 <Garage_System_Start+0x51a>
	else if (__tmp > 65535)
    1e20:	fe 01       	movw	r30, r28
    1e22:	eb 57       	subi	r30, 0x7B	; 123
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	60 81       	ld	r22, Z
    1e28:	71 81       	ldd	r23, Z+1	; 0x01
    1e2a:	82 81       	ldd	r24, Z+2	; 0x02
    1e2c:	93 81       	ldd	r25, Z+3	; 0x03
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	3f ef       	ldi	r19, 0xFF	; 255
    1e32:	4f e7       	ldi	r20, 0x7F	; 127
    1e34:	57 e4       	ldi	r21, 0x47	; 71
    1e36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e3a:	18 16       	cp	r1, r24
    1e3c:	0c f0       	brlt	.+2      	; 0x1e40 <Garage_System_Start+0x472>
    1e3e:	43 c0       	rjmp	.+134    	; 0x1ec6 <Garage_System_Start+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e40:	fe 01       	movw	r30, r28
    1e42:	e7 57       	subi	r30, 0x77	; 119
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	60 81       	ld	r22, Z
    1e48:	71 81       	ldd	r23, Z+1	; 0x01
    1e4a:	82 81       	ldd	r24, Z+2	; 0x02
    1e4c:	93 81       	ldd	r25, Z+3	; 0x03
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e2       	ldi	r20, 0x20	; 32
    1e54:	51 e4       	ldi	r21, 0x41	; 65
    1e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	8e 01       	movw	r16, r28
    1e60:	0d 57       	subi	r16, 0x7D	; 125
    1e62:	1f 4f       	sbci	r17, 0xFF	; 255
    1e64:	bc 01       	movw	r22, r24
    1e66:	cd 01       	movw	r24, r26
    1e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	f8 01       	movw	r30, r16
    1e72:	91 83       	std	Z+1, r25	; 0x01
    1e74:	80 83       	st	Z, r24
    1e76:	1f c0       	rjmp	.+62     	; 0x1eb6 <Garage_System_Start+0x4e8>
    1e78:	fe 01       	movw	r30, r28
    1e7a:	ef 57       	subi	r30, 0x7F	; 127
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	88 ec       	ldi	r24, 0xC8	; 200
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	91 83       	std	Z+1, r25	; 0x01
    1e84:	80 83       	st	Z, r24
    1e86:	fe 01       	movw	r30, r28
    1e88:	ef 57       	subi	r30, 0x7F	; 127
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	80 81       	ld	r24, Z
    1e8e:	91 81       	ldd	r25, Z+1	; 0x01
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <Garage_System_Start+0x4c2>
    1e94:	fe 01       	movw	r30, r28
    1e96:	ef 57       	subi	r30, 0x7F	; 127
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	91 83       	std	Z+1, r25	; 0x01
    1e9c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9e:	de 01       	movw	r26, r28
    1ea0:	ad 57       	subi	r26, 0x7D	; 125
    1ea2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	ed 57       	subi	r30, 0x7D	; 125
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	80 81       	ld	r24, Z
    1eac:	91 81       	ldd	r25, Z+1	; 0x01
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	11 96       	adiw	r26, 0x01	; 1
    1eb2:	9c 93       	st	X, r25
    1eb4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	ed 57       	subi	r30, 0x7D	; 125
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	80 81       	ld	r24, Z
    1ebe:	91 81       	ldd	r25, Z+1	; 0x01
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	d1 f6       	brne	.-76     	; 0x1e78 <Garage_System_Start+0x4aa>
    1ec4:	27 c0       	rjmp	.+78     	; 0x1f14 <Garage_System_Start+0x546>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec6:	8e 01       	movw	r16, r28
    1ec8:	0d 57       	subi	r16, 0x7D	; 125
    1eca:	1f 4f       	sbci	r17, 0xFF	; 255
    1ecc:	fe 01       	movw	r30, r28
    1ece:	eb 57       	subi	r30, 0x7B	; 123
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	60 81       	ld	r22, Z
    1ed4:	71 81       	ldd	r23, Z+1	; 0x01
    1ed6:	82 81       	ldd	r24, Z+2	; 0x02
    1ed8:	93 81       	ldd	r25, Z+3	; 0x03
    1eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	f8 01       	movw	r30, r16
    1ee4:	91 83       	std	Z+1, r25	; 0x01
    1ee6:	80 83       	st	Z, r24
    1ee8:	de 01       	movw	r26, r28
    1eea:	a1 58       	subi	r26, 0x81	; 129
    1eec:	bf 4f       	sbci	r27, 0xFF	; 255
    1eee:	fe 01       	movw	r30, r28
    1ef0:	ed 57       	subi	r30, 0x7D	; 125
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	80 81       	ld	r24, Z
    1ef6:	91 81       	ldd	r25, Z+1	; 0x01
    1ef8:	8d 93       	st	X+, r24
    1efa:	9c 93       	st	X, r25
    1efc:	fe 01       	movw	r30, r28
    1efe:	e1 58       	subi	r30, 0x81	; 129
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	80 81       	ld	r24, Z
    1f04:	91 81       	ldd	r25, Z+1	; 0x01
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <Garage_System_Start+0x538>
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	e1 58       	subi	r30, 0x81	; 129
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	91 83       	std	Z+1, r25	; 0x01
    1f12:	80 83       	st	Z, r24
				{
					Servo_Rotete(OCB , i);
					_delay_ms(10);
				}
				_delay_ms(1000);
				for(u8 i=89 ; i>0 ; i--) /*Close Entry Gate*/
    1f14:	de 01       	movw	r26, r28
    1f16:	a1 55       	subi	r26, 0x51	; 81
    1f18:	bf 4f       	sbci	r27, 0xFF	; 255
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	e1 55       	subi	r30, 0x51	; 81
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	80 81       	ld	r24, Z
    1f22:	81 50       	subi	r24, 0x01	; 1
    1f24:	8c 93       	st	X, r24
    1f26:	fe 01       	movw	r30, r28
    1f28:	e1 55       	subi	r30, 0x51	; 81
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	80 81       	ld	r24, Z
    1f2e:	88 23       	and	r24, r24
    1f30:	09 f0       	breq	.+2      	; 0x1f34 <Garage_System_Start+0x566>
    1f32:	36 cf       	rjmp	.-404    	; 0x1da0 <Garage_System_Start+0x3d2>
    1f34:	5b c2       	rjmp	.+1206   	; 0x23ec <Garage_System_Start+0xa1e>
					_delay_ms(10);
				}
			}
			else
			{
				CLCD_GoToXY(1,0);
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	60 e0       	ldi	r22, 0x00	; 0
    1f3a:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_vidSendString("Garage Has Space");
    1f3e:	81 e7       	ldi	r24, 0x71	; 113
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
				for(u8 i=0 ; i<=90 ; i++) /*Open Entry Gate*/
    1f46:	fe 01       	movw	r30, r28
    1f48:	e2 55       	subi	r30, 0x52	; 82
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	10 82       	st	Z, r1
    1f4e:	c3 c0       	rjmp	.+390    	; 0x20d6 <Garage_System_Start+0x708>
				{
					Servo_Rotete(OCB , i);
    1f50:	fe 01       	movw	r30, r28
    1f52:	e2 55       	subi	r30, 0x52	; 82
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	83 e0       	ldi	r24, 0x03	; 3
    1f58:	60 81       	ld	r22, Z
    1f5a:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <Servo_Rotete>
    1f5e:	fe 01       	movw	r30, r28
    1f60:	e5 58       	subi	r30, 0x85	; 133
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	a0 e2       	ldi	r26, 0x20	; 32
    1f6a:	b1 e4       	ldi	r27, 0x41	; 65
    1f6c:	80 83       	st	Z, r24
    1f6e:	91 83       	std	Z+1, r25	; 0x01
    1f70:	a2 83       	std	Z+2, r26	; 0x02
    1f72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f74:	8e 01       	movw	r16, r28
    1f76:	09 58       	subi	r16, 0x89	; 137
    1f78:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	e5 58       	subi	r30, 0x85	; 133
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	60 81       	ld	r22, Z
    1f82:	71 81       	ldd	r23, Z+1	; 0x01
    1f84:	82 81       	ldd	r24, Z+2	; 0x02
    1f86:	93 81       	ldd	r25, Z+3	; 0x03
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	4a ef       	ldi	r20, 0xFA	; 250
    1f8e:	54 e4       	ldi	r21, 0x44	; 68
    1f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	f8 01       	movw	r30, r16
    1f9a:	80 83       	st	Z, r24
    1f9c:	91 83       	std	Z+1, r25	; 0x01
    1f9e:	a2 83       	std	Z+2, r26	; 0x02
    1fa0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e9 58       	subi	r30, 0x89	; 137
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	60 81       	ld	r22, Z
    1faa:	71 81       	ldd	r23, Z+1	; 0x01
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	93 81       	ldd	r25, Z+3	; 0x03
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e8       	ldi	r20, 0x80	; 128
    1fb6:	5f e3       	ldi	r21, 0x3F	; 63
    1fb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fbc:	88 23       	and	r24, r24
    1fbe:	44 f4       	brge	.+16     	; 0x1fd0 <Garage_System_Start+0x602>
		__ticks = 1;
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	eb 58       	subi	r30, 0x8B	; 139
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	91 83       	std	Z+1, r25	; 0x01
    1fcc:	80 83       	st	Z, r24
    1fce:	64 c0       	rjmp	.+200    	; 0x2098 <Garage_System_Start+0x6ca>
	else if (__tmp > 65535)
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	e9 58       	subi	r30, 0x89	; 137
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	60 81       	ld	r22, Z
    1fd8:	71 81       	ldd	r23, Z+1	; 0x01
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	93 81       	ldd	r25, Z+3	; 0x03
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	3f ef       	ldi	r19, 0xFF	; 255
    1fe2:	4f e7       	ldi	r20, 0x7F	; 127
    1fe4:	57 e4       	ldi	r21, 0x47	; 71
    1fe6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fea:	18 16       	cp	r1, r24
    1fec:	0c f0       	brlt	.+2      	; 0x1ff0 <Garage_System_Start+0x622>
    1fee:	43 c0       	rjmp	.+134    	; 0x2076 <Garage_System_Start+0x6a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e5 58       	subi	r30, 0x85	; 133
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	60 81       	ld	r22, Z
    1ff8:	71 81       	ldd	r23, Z+1	; 0x01
    1ffa:	82 81       	ldd	r24, Z+2	; 0x02
    1ffc:	93 81       	ldd	r25, Z+3	; 0x03
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e2       	ldi	r20, 0x20	; 32
    2004:	51 e4       	ldi	r21, 0x41	; 65
    2006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	8e 01       	movw	r16, r28
    2010:	0b 58       	subi	r16, 0x8B	; 139
    2012:	1f 4f       	sbci	r17, 0xFF	; 255
    2014:	bc 01       	movw	r22, r24
    2016:	cd 01       	movw	r24, r26
    2018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	f8 01       	movw	r30, r16
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	80 83       	st	Z, r24
    2026:	1f c0       	rjmp	.+62     	; 0x2066 <Garage_System_Start+0x698>
    2028:	fe 01       	movw	r30, r28
    202a:	ed 58       	subi	r30, 0x8D	; 141
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	88 ec       	ldi	r24, 0xC8	; 200
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	91 83       	std	Z+1, r25	; 0x01
    2034:	80 83       	st	Z, r24
    2036:	fe 01       	movw	r30, r28
    2038:	ed 58       	subi	r30, 0x8D	; 141
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	80 81       	ld	r24, Z
    203e:	91 81       	ldd	r25, Z+1	; 0x01
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <Garage_System_Start+0x672>
    2044:	fe 01       	movw	r30, r28
    2046:	ed 58       	subi	r30, 0x8D	; 141
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	91 83       	std	Z+1, r25	; 0x01
    204c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204e:	de 01       	movw	r26, r28
    2050:	ab 58       	subi	r26, 0x8B	; 139
    2052:	bf 4f       	sbci	r27, 0xFF	; 255
    2054:	fe 01       	movw	r30, r28
    2056:	eb 58       	subi	r30, 0x8B	; 139
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	80 81       	ld	r24, Z
    205c:	91 81       	ldd	r25, Z+1	; 0x01
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	11 96       	adiw	r26, 0x01	; 1
    2062:	9c 93       	st	X, r25
    2064:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2066:	fe 01       	movw	r30, r28
    2068:	eb 58       	subi	r30, 0x8B	; 139
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	80 81       	ld	r24, Z
    206e:	91 81       	ldd	r25, Z+1	; 0x01
    2070:	00 97       	sbiw	r24, 0x00	; 0
    2072:	d1 f6       	brne	.-76     	; 0x2028 <Garage_System_Start+0x65a>
    2074:	27 c0       	rjmp	.+78     	; 0x20c4 <Garage_System_Start+0x6f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2076:	8e 01       	movw	r16, r28
    2078:	0b 58       	subi	r16, 0x8B	; 139
    207a:	1f 4f       	sbci	r17, 0xFF	; 255
    207c:	fe 01       	movw	r30, r28
    207e:	e9 58       	subi	r30, 0x89	; 137
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	60 81       	ld	r22, Z
    2084:	71 81       	ldd	r23, Z+1	; 0x01
    2086:	82 81       	ldd	r24, Z+2	; 0x02
    2088:	93 81       	ldd	r25, Z+3	; 0x03
    208a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	f8 01       	movw	r30, r16
    2094:	91 83       	std	Z+1, r25	; 0x01
    2096:	80 83       	st	Z, r24
    2098:	de 01       	movw	r26, r28
    209a:	af 58       	subi	r26, 0x8F	; 143
    209c:	bf 4f       	sbci	r27, 0xFF	; 255
    209e:	fe 01       	movw	r30, r28
    20a0:	eb 58       	subi	r30, 0x8B	; 139
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	80 81       	ld	r24, Z
    20a6:	91 81       	ldd	r25, Z+1	; 0x01
    20a8:	8d 93       	st	X+, r24
    20aa:	9c 93       	st	X, r25
    20ac:	fe 01       	movw	r30, r28
    20ae:	ef 58       	subi	r30, 0x8F	; 143
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	80 81       	ld	r24, Z
    20b4:	91 81       	ldd	r25, Z+1	; 0x01
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	f1 f7       	brne	.-4      	; 0x20b6 <Garage_System_Start+0x6e8>
    20ba:	fe 01       	movw	r30, r28
    20bc:	ef 58       	subi	r30, 0x8F	; 143
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	91 83       	std	Z+1, r25	; 0x01
    20c2:	80 83       	st	Z, r24
			}
			else
			{
				CLCD_GoToXY(1,0);
				CLCD_vidSendString("Garage Has Space");
				for(u8 i=0 ; i<=90 ; i++) /*Open Entry Gate*/
    20c4:	de 01       	movw	r26, r28
    20c6:	a2 55       	subi	r26, 0x52	; 82
    20c8:	bf 4f       	sbci	r27, 0xFF	; 255
    20ca:	fe 01       	movw	r30, r28
    20cc:	e2 55       	subi	r30, 0x52	; 82
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	80 81       	ld	r24, Z
    20d2:	8f 5f       	subi	r24, 0xFF	; 255
    20d4:	8c 93       	st	X, r24
    20d6:	fe 01       	movw	r30, r28
    20d8:	e2 55       	subi	r30, 0x52	; 82
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	80 81       	ld	r24, Z
    20de:	8b 35       	cpi	r24, 0x5B	; 91
    20e0:	08 f4       	brcc	.+2      	; 0x20e4 <Garage_System_Start+0x716>
    20e2:	36 cf       	rjmp	.-404    	; 0x1f50 <Garage_System_Start+0x582>
    20e4:	fe 01       	movw	r30, r28
    20e6:	e3 59       	subi	r30, 0x93	; 147
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	aa e7       	ldi	r26, 0x7A	; 122
    20f0:	b4 e4       	ldi	r27, 0x44	; 68
    20f2:	80 83       	st	Z, r24
    20f4:	91 83       	std	Z+1, r25	; 0x01
    20f6:	a2 83       	std	Z+2, r26	; 0x02
    20f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fa:	8e 01       	movw	r16, r28
    20fc:	07 59       	subi	r16, 0x97	; 151
    20fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2100:	fe 01       	movw	r30, r28
    2102:	e3 59       	subi	r30, 0x93	; 147
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	60 81       	ld	r22, Z
    2108:	71 81       	ldd	r23, Z+1	; 0x01
    210a:	82 81       	ldd	r24, Z+2	; 0x02
    210c:	93 81       	ldd	r25, Z+3	; 0x03
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	4a ef       	ldi	r20, 0xFA	; 250
    2114:	54 e4       	ldi	r21, 0x44	; 68
    2116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	f8 01       	movw	r30, r16
    2120:	80 83       	st	Z, r24
    2122:	91 83       	std	Z+1, r25	; 0x01
    2124:	a2 83       	std	Z+2, r26	; 0x02
    2126:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2128:	fe 01       	movw	r30, r28
    212a:	e7 59       	subi	r30, 0x97	; 151
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	60 81       	ld	r22, Z
    2130:	71 81       	ldd	r23, Z+1	; 0x01
    2132:	82 81       	ldd	r24, Z+2	; 0x02
    2134:	93 81       	ldd	r25, Z+3	; 0x03
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e8       	ldi	r20, 0x80	; 128
    213c:	5f e3       	ldi	r21, 0x3F	; 63
    213e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2142:	88 23       	and	r24, r24
    2144:	44 f4       	brge	.+16     	; 0x2156 <Garage_System_Start+0x788>
		__ticks = 1;
    2146:	fe 01       	movw	r30, r28
    2148:	e9 59       	subi	r30, 0x99	; 153
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	91 83       	std	Z+1, r25	; 0x01
    2152:	80 83       	st	Z, r24
    2154:	64 c0       	rjmp	.+200    	; 0x221e <Garage_System_Start+0x850>
	else if (__tmp > 65535)
    2156:	fe 01       	movw	r30, r28
    2158:	e7 59       	subi	r30, 0x97	; 151
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	60 81       	ld	r22, Z
    215e:	71 81       	ldd	r23, Z+1	; 0x01
    2160:	82 81       	ldd	r24, Z+2	; 0x02
    2162:	93 81       	ldd	r25, Z+3	; 0x03
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	3f ef       	ldi	r19, 0xFF	; 255
    2168:	4f e7       	ldi	r20, 0x7F	; 127
    216a:	57 e4       	ldi	r21, 0x47	; 71
    216c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2170:	18 16       	cp	r1, r24
    2172:	0c f0       	brlt	.+2      	; 0x2176 <Garage_System_Start+0x7a8>
    2174:	43 c0       	rjmp	.+134    	; 0x21fc <Garage_System_Start+0x82e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2176:	fe 01       	movw	r30, r28
    2178:	e3 59       	subi	r30, 0x93	; 147
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	60 81       	ld	r22, Z
    217e:	71 81       	ldd	r23, Z+1	; 0x01
    2180:	82 81       	ldd	r24, Z+2	; 0x02
    2182:	93 81       	ldd	r25, Z+3	; 0x03
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e2       	ldi	r20, 0x20	; 32
    218a:	51 e4       	ldi	r21, 0x41	; 65
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	8e 01       	movw	r16, r28
    2196:	09 59       	subi	r16, 0x99	; 153
    2198:	1f 4f       	sbci	r17, 0xFF	; 255
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	f8 01       	movw	r30, r16
    21a8:	91 83       	std	Z+1, r25	; 0x01
    21aa:	80 83       	st	Z, r24
    21ac:	1f c0       	rjmp	.+62     	; 0x21ec <Garage_System_Start+0x81e>
    21ae:	fe 01       	movw	r30, r28
    21b0:	eb 59       	subi	r30, 0x9B	; 155
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	88 ec       	ldi	r24, 0xC8	; 200
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	91 83       	std	Z+1, r25	; 0x01
    21ba:	80 83       	st	Z, r24
    21bc:	fe 01       	movw	r30, r28
    21be:	eb 59       	subi	r30, 0x9B	; 155
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	80 81       	ld	r24, Z
    21c4:	91 81       	ldd	r25, Z+1	; 0x01
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <Garage_System_Start+0x7f8>
    21ca:	fe 01       	movw	r30, r28
    21cc:	eb 59       	subi	r30, 0x9B	; 155
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	91 83       	std	Z+1, r25	; 0x01
    21d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d4:	de 01       	movw	r26, r28
    21d6:	a9 59       	subi	r26, 0x99	; 153
    21d8:	bf 4f       	sbci	r27, 0xFF	; 255
    21da:	fe 01       	movw	r30, r28
    21dc:	e9 59       	subi	r30, 0x99	; 153
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	80 81       	ld	r24, Z
    21e2:	91 81       	ldd	r25, Z+1	; 0x01
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	11 96       	adiw	r26, 0x01	; 1
    21e8:	9c 93       	st	X, r25
    21ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ec:	fe 01       	movw	r30, r28
    21ee:	e9 59       	subi	r30, 0x99	; 153
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	80 81       	ld	r24, Z
    21f4:	91 81       	ldd	r25, Z+1	; 0x01
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	d1 f6       	brne	.-76     	; 0x21ae <Garage_System_Start+0x7e0>
    21fa:	28 c0       	rjmp	.+80     	; 0x224c <Garage_System_Start+0x87e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fc:	8e 01       	movw	r16, r28
    21fe:	09 59       	subi	r16, 0x99	; 153
    2200:	1f 4f       	sbci	r17, 0xFF	; 255
    2202:	fe 01       	movw	r30, r28
    2204:	e7 59       	subi	r30, 0x97	; 151
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	60 81       	ld	r22, Z
    220a:	71 81       	ldd	r23, Z+1	; 0x01
    220c:	82 81       	ldd	r24, Z+2	; 0x02
    220e:	93 81       	ldd	r25, Z+3	; 0x03
    2210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	f8 01       	movw	r30, r16
    221a:	91 83       	std	Z+1, r25	; 0x01
    221c:	80 83       	st	Z, r24
    221e:	de 01       	movw	r26, r28
    2220:	ad 59       	subi	r26, 0x9D	; 157
    2222:	bf 4f       	sbci	r27, 0xFF	; 255
    2224:	fe 01       	movw	r30, r28
    2226:	e9 59       	subi	r30, 0x99	; 153
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 81       	ld	r24, Z
    222c:	91 81       	ldd	r25, Z+1	; 0x01
    222e:	11 96       	adiw	r26, 0x01	; 1
    2230:	9c 93       	st	X, r25
    2232:	8e 93       	st	-X, r24
    2234:	fe 01       	movw	r30, r28
    2236:	ed 59       	subi	r30, 0x9D	; 157
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	80 81       	ld	r24, Z
    223c:	91 81       	ldd	r25, Z+1	; 0x01
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	f1 f7       	brne	.-4      	; 0x223e <Garage_System_Start+0x870>
    2242:	fe 01       	movw	r30, r28
    2244:	ed 59       	subi	r30, 0x9D	; 157
    2246:	ff 4f       	sbci	r31, 0xFF	; 255
    2248:	91 83       	std	Z+1, r25	; 0x01
    224a:	80 83       	st	Z, r24
				{
					Servo_Rotete(OCB , i);
					_delay_ms(10);
				}
				_delay_ms(1000);
				for(u8 i=89 ; i>0 ; i--) /*Close Entry Gate*/
    224c:	fe 01       	movw	r30, r28
    224e:	e3 55       	subi	r30, 0x53	; 83
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	89 e5       	ldi	r24, 0x59	; 89
    2254:	80 83       	st	Z, r24
    2256:	c3 c0       	rjmp	.+390    	; 0x23de <Garage_System_Start+0xa10>
				{
					Servo_Rotete(OCB , i);
    2258:	fe 01       	movw	r30, r28
    225a:	e3 55       	subi	r30, 0x53	; 83
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	83 e0       	ldi	r24, 0x03	; 3
    2260:	60 81       	ld	r22, Z
    2262:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <Servo_Rotete>
    2266:	fe 01       	movw	r30, r28
    2268:	e1 5a       	subi	r30, 0xA1	; 161
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	a0 e2       	ldi	r26, 0x20	; 32
    2272:	b1 e4       	ldi	r27, 0x41	; 65
    2274:	80 83       	st	Z, r24
    2276:	91 83       	std	Z+1, r25	; 0x01
    2278:	a2 83       	std	Z+2, r26	; 0x02
    227a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227c:	8e 01       	movw	r16, r28
    227e:	05 5a       	subi	r16, 0xA5	; 165
    2280:	1f 4f       	sbci	r17, 0xFF	; 255
    2282:	fe 01       	movw	r30, r28
    2284:	e1 5a       	subi	r30, 0xA1	; 161
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	60 81       	ld	r22, Z
    228a:	71 81       	ldd	r23, Z+1	; 0x01
    228c:	82 81       	ldd	r24, Z+2	; 0x02
    228e:	93 81       	ldd	r25, Z+3	; 0x03
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	4a ef       	ldi	r20, 0xFA	; 250
    2296:	54 e4       	ldi	r21, 0x44	; 68
    2298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	f8 01       	movw	r30, r16
    22a2:	80 83       	st	Z, r24
    22a4:	91 83       	std	Z+1, r25	; 0x01
    22a6:	a2 83       	std	Z+2, r26	; 0x02
    22a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22aa:	fe 01       	movw	r30, r28
    22ac:	e5 5a       	subi	r30, 0xA5	; 165
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	60 81       	ld	r22, Z
    22b2:	71 81       	ldd	r23, Z+1	; 0x01
    22b4:	82 81       	ldd	r24, Z+2	; 0x02
    22b6:	93 81       	ldd	r25, Z+3	; 0x03
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e8       	ldi	r20, 0x80	; 128
    22be:	5f e3       	ldi	r21, 0x3F	; 63
    22c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22c4:	88 23       	and	r24, r24
    22c6:	44 f4       	brge	.+16     	; 0x22d8 <Garage_System_Start+0x90a>
		__ticks = 1;
    22c8:	fe 01       	movw	r30, r28
    22ca:	e7 5a       	subi	r30, 0xA7	; 167
    22cc:	ff 4f       	sbci	r31, 0xFF	; 255
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	91 83       	std	Z+1, r25	; 0x01
    22d4:	80 83       	st	Z, r24
    22d6:	64 c0       	rjmp	.+200    	; 0x23a0 <Garage_System_Start+0x9d2>
	else if (__tmp > 65535)
    22d8:	fe 01       	movw	r30, r28
    22da:	e5 5a       	subi	r30, 0xA5	; 165
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	60 81       	ld	r22, Z
    22e0:	71 81       	ldd	r23, Z+1	; 0x01
    22e2:	82 81       	ldd	r24, Z+2	; 0x02
    22e4:	93 81       	ldd	r25, Z+3	; 0x03
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	3f ef       	ldi	r19, 0xFF	; 255
    22ea:	4f e7       	ldi	r20, 0x7F	; 127
    22ec:	57 e4       	ldi	r21, 0x47	; 71
    22ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22f2:	18 16       	cp	r1, r24
    22f4:	0c f0       	brlt	.+2      	; 0x22f8 <Garage_System_Start+0x92a>
    22f6:	43 c0       	rjmp	.+134    	; 0x237e <Garage_System_Start+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f8:	fe 01       	movw	r30, r28
    22fa:	e1 5a       	subi	r30, 0xA1	; 161
    22fc:	ff 4f       	sbci	r31, 0xFF	; 255
    22fe:	60 81       	ld	r22, Z
    2300:	71 81       	ldd	r23, Z+1	; 0x01
    2302:	82 81       	ldd	r24, Z+2	; 0x02
    2304:	93 81       	ldd	r25, Z+3	; 0x03
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	40 e2       	ldi	r20, 0x20	; 32
    230c:	51 e4       	ldi	r21, 0x41	; 65
    230e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	8e 01       	movw	r16, r28
    2318:	07 5a       	subi	r16, 0xA7	; 167
    231a:	1f 4f       	sbci	r17, 0xFF	; 255
    231c:	bc 01       	movw	r22, r24
    231e:	cd 01       	movw	r24, r26
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	f8 01       	movw	r30, r16
    232a:	91 83       	std	Z+1, r25	; 0x01
    232c:	80 83       	st	Z, r24
    232e:	1f c0       	rjmp	.+62     	; 0x236e <Garage_System_Start+0x9a0>
    2330:	fe 01       	movw	r30, r28
    2332:	e9 5a       	subi	r30, 0xA9	; 169
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	88 ec       	ldi	r24, 0xC8	; 200
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	91 83       	std	Z+1, r25	; 0x01
    233c:	80 83       	st	Z, r24
    233e:	fe 01       	movw	r30, r28
    2340:	e9 5a       	subi	r30, 0xA9	; 169
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	80 81       	ld	r24, Z
    2346:	91 81       	ldd	r25, Z+1	; 0x01
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	f1 f7       	brne	.-4      	; 0x2348 <Garage_System_Start+0x97a>
    234c:	fe 01       	movw	r30, r28
    234e:	e9 5a       	subi	r30, 0xA9	; 169
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	91 83       	std	Z+1, r25	; 0x01
    2354:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2356:	de 01       	movw	r26, r28
    2358:	a7 5a       	subi	r26, 0xA7	; 167
    235a:	bf 4f       	sbci	r27, 0xFF	; 255
    235c:	fe 01       	movw	r30, r28
    235e:	e7 5a       	subi	r30, 0xA7	; 167
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	80 81       	ld	r24, Z
    2364:	91 81       	ldd	r25, Z+1	; 0x01
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	11 96       	adiw	r26, 0x01	; 1
    236a:	9c 93       	st	X, r25
    236c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236e:	fe 01       	movw	r30, r28
    2370:	e7 5a       	subi	r30, 0xA7	; 167
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	80 81       	ld	r24, Z
    2376:	91 81       	ldd	r25, Z+1	; 0x01
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	d1 f6       	brne	.-76     	; 0x2330 <Garage_System_Start+0x962>
    237c:	27 c0       	rjmp	.+78     	; 0x23cc <Garage_System_Start+0x9fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237e:	8e 01       	movw	r16, r28
    2380:	07 5a       	subi	r16, 0xA7	; 167
    2382:	1f 4f       	sbci	r17, 0xFF	; 255
    2384:	fe 01       	movw	r30, r28
    2386:	e5 5a       	subi	r30, 0xA5	; 165
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	60 81       	ld	r22, Z
    238c:	71 81       	ldd	r23, Z+1	; 0x01
    238e:	82 81       	ldd	r24, Z+2	; 0x02
    2390:	93 81       	ldd	r25, Z+3	; 0x03
    2392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	f8 01       	movw	r30, r16
    239c:	91 83       	std	Z+1, r25	; 0x01
    239e:	80 83       	st	Z, r24
    23a0:	de 01       	movw	r26, r28
    23a2:	ab 5a       	subi	r26, 0xAB	; 171
    23a4:	bf 4f       	sbci	r27, 0xFF	; 255
    23a6:	fe 01       	movw	r30, r28
    23a8:	e7 5a       	subi	r30, 0xA7	; 167
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	80 81       	ld	r24, Z
    23ae:	91 81       	ldd	r25, Z+1	; 0x01
    23b0:	8d 93       	st	X+, r24
    23b2:	9c 93       	st	X, r25
    23b4:	fe 01       	movw	r30, r28
    23b6:	eb 5a       	subi	r30, 0xAB	; 171
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	80 81       	ld	r24, Z
    23bc:	91 81       	ldd	r25, Z+1	; 0x01
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <Garage_System_Start+0x9f0>
    23c2:	fe 01       	movw	r30, r28
    23c4:	eb 5a       	subi	r30, 0xAB	; 171
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	91 83       	std	Z+1, r25	; 0x01
    23ca:	80 83       	st	Z, r24
				{
					Servo_Rotete(OCB , i);
					_delay_ms(10);
				}
				_delay_ms(1000);
				for(u8 i=89 ; i>0 ; i--) /*Close Entry Gate*/
    23cc:	de 01       	movw	r26, r28
    23ce:	a3 55       	subi	r26, 0x53	; 83
    23d0:	bf 4f       	sbci	r27, 0xFF	; 255
    23d2:	fe 01       	movw	r30, r28
    23d4:	e3 55       	subi	r30, 0x53	; 83
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	80 81       	ld	r24, Z
    23da:	81 50       	subi	r24, 0x01	; 1
    23dc:	8c 93       	st	X, r24
    23de:	fe 01       	movw	r30, r28
    23e0:	e3 55       	subi	r30, 0x53	; 83
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	80 81       	ld	r24, Z
    23e6:	88 23       	and	r24, r24
    23e8:	09 f0       	breq	.+2      	; 0x23ec <Garage_System_Start+0xa1e>
    23ea:	36 cf       	rjmp	.-404    	; 0x2258 <Garage_System_Start+0x88a>
				}

			}

		}
		if (Local_u8ExitPinVal == 0 && Local_u8NumberOfCars != 0)/*Pin Of Exit Gate*/
    23ec:	fe 01       	movw	r30, r28
    23ee:	ee 54       	subi	r30, 0x4E	; 78
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	80 81       	ld	r24, Z
    23f4:	88 23       	and	r24, r24
    23f6:	09 f0       	breq	.+2      	; 0x23fa <Garage_System_Start+0xa2c>
    23f8:	03 cb       	rjmp	.-2554   	; 0x1a00 <Garage_System_Start+0x32>
    23fa:	80 91 b7 00 	lds	r24, 0x00B7
    23fe:	88 23       	and	r24, r24
    2400:	09 f4       	brne	.+2      	; 0x2404 <Garage_System_Start+0xa36>
    2402:	fe ca       	rjmp	.-2564   	; 0x1a00 <Garage_System_Start+0x32>
		{
			Local_u8NumberOfCars -- ;
    2404:	80 91 b7 00 	lds	r24, 0x00B7
    2408:	81 50       	subi	r24, 0x01	; 1
    240a:	80 93 b7 00 	sts	0x00B7, r24

			CLCD_voidSendCommand(1) ;
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
			CLCD_vidSendString("There Are ") ;
    2414:	82 e8       	ldi	r24, 0x82	; 130
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
			CLCD_GoToXY(0,10) ;
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	6a e0       	ldi	r22, 0x0A	; 10
    2420:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_write_Number(Local_u8NumberOfCars);
    2424:	80 91 b7 00 	lds	r24, 0x00B7
    2428:	88 2f       	mov	r24, r24
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_write_Number>
			CLCD_GoToXY(0,11);
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	6b e0       	ldi	r22, 0x0B	; 11
    2434:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_vidSendString(" Cars") ;
    2438:	8d e8       	ldi	r24, 0x8D	; 141
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>

			if (Local_u8NumberOfCars == 0)
    2440:	80 91 b7 00 	lds	r24, 0x00B7
    2444:	88 23       	and	r24, r24
    2446:	09 f0       	breq	.+2      	; 0x244a <Garage_System_Start+0xa7c>
    2448:	ec c1       	rjmp	.+984    	; 0x2822 <Garage_System_Start+0xe54>
			{
				CLCD_GoToXY(1,0);
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_vidSendString("Garage Has Space");
    2452:	81 e7       	ldi	r24, 0x71	; 113
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
				for(u8 i=0 ; i<=90 ; i++) /*Open Exit Gate*/
    245a:	fe 01       	movw	r30, r28
    245c:	e4 55       	subi	r30, 0x54	; 84
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	10 82       	st	Z, r1
    2462:	c3 c0       	rjmp	.+390    	; 0x25ea <Garage_System_Start+0xc1c>
				{
					Servo_Rotete(OCA , i);
    2464:	fe 01       	movw	r30, r28
    2466:	e4 55       	subi	r30, 0x54	; 84
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	82 e0       	ldi	r24, 0x02	; 2
    246c:	60 81       	ld	r22, Z
    246e:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <Servo_Rotete>
    2472:	fe 01       	movw	r30, r28
    2474:	ef 5a       	subi	r30, 0xAF	; 175
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	a0 e2       	ldi	r26, 0x20	; 32
    247e:	b1 e4       	ldi	r27, 0x41	; 65
    2480:	80 83       	st	Z, r24
    2482:	91 83       	std	Z+1, r25	; 0x01
    2484:	a2 83       	std	Z+2, r26	; 0x02
    2486:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2488:	8e 01       	movw	r16, r28
    248a:	03 5b       	subi	r16, 0xB3	; 179
    248c:	1f 4f       	sbci	r17, 0xFF	; 255
    248e:	fe 01       	movw	r30, r28
    2490:	ef 5a       	subi	r30, 0xAF	; 175
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	60 81       	ld	r22, Z
    2496:	71 81       	ldd	r23, Z+1	; 0x01
    2498:	82 81       	ldd	r24, Z+2	; 0x02
    249a:	93 81       	ldd	r25, Z+3	; 0x03
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	4a ef       	ldi	r20, 0xFA	; 250
    24a2:	54 e4       	ldi	r21, 0x44	; 68
    24a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	f8 01       	movw	r30, r16
    24ae:	80 83       	st	Z, r24
    24b0:	91 83       	std	Z+1, r25	; 0x01
    24b2:	a2 83       	std	Z+2, r26	; 0x02
    24b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24b6:	fe 01       	movw	r30, r28
    24b8:	e3 5b       	subi	r30, 0xB3	; 179
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	60 81       	ld	r22, Z
    24be:	71 81       	ldd	r23, Z+1	; 0x01
    24c0:	82 81       	ldd	r24, Z+2	; 0x02
    24c2:	93 81       	ldd	r25, Z+3	; 0x03
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e8       	ldi	r20, 0x80	; 128
    24ca:	5f e3       	ldi	r21, 0x3F	; 63
    24cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d0:	88 23       	and	r24, r24
    24d2:	44 f4       	brge	.+16     	; 0x24e4 <Garage_System_Start+0xb16>
		__ticks = 1;
    24d4:	fe 01       	movw	r30, r28
    24d6:	e5 5b       	subi	r30, 0xB5	; 181
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	91 83       	std	Z+1, r25	; 0x01
    24e0:	80 83       	st	Z, r24
    24e2:	64 c0       	rjmp	.+200    	; 0x25ac <Garage_System_Start+0xbde>
	else if (__tmp > 65535)
    24e4:	fe 01       	movw	r30, r28
    24e6:	e3 5b       	subi	r30, 0xB3	; 179
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	60 81       	ld	r22, Z
    24ec:	71 81       	ldd	r23, Z+1	; 0x01
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	3f ef       	ldi	r19, 0xFF	; 255
    24f6:	4f e7       	ldi	r20, 0x7F	; 127
    24f8:	57 e4       	ldi	r21, 0x47	; 71
    24fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24fe:	18 16       	cp	r1, r24
    2500:	0c f0       	brlt	.+2      	; 0x2504 <Garage_System_Start+0xb36>
    2502:	43 c0       	rjmp	.+134    	; 0x258a <Garage_System_Start+0xbbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2504:	fe 01       	movw	r30, r28
    2506:	ef 5a       	subi	r30, 0xAF	; 175
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	60 81       	ld	r22, Z
    250c:	71 81       	ldd	r23, Z+1	; 0x01
    250e:	82 81       	ldd	r24, Z+2	; 0x02
    2510:	93 81       	ldd	r25, Z+3	; 0x03
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e2       	ldi	r20, 0x20	; 32
    2518:	51 e4       	ldi	r21, 0x41	; 65
    251a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	8e 01       	movw	r16, r28
    2524:	05 5b       	subi	r16, 0xB5	; 181
    2526:	1f 4f       	sbci	r17, 0xFF	; 255
    2528:	bc 01       	movw	r22, r24
    252a:	cd 01       	movw	r24, r26
    252c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	f8 01       	movw	r30, r16
    2536:	91 83       	std	Z+1, r25	; 0x01
    2538:	80 83       	st	Z, r24
    253a:	1f c0       	rjmp	.+62     	; 0x257a <Garage_System_Start+0xbac>
    253c:	fe 01       	movw	r30, r28
    253e:	e7 5b       	subi	r30, 0xB7	; 183
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	88 ec       	ldi	r24, 0xC8	; 200
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	91 83       	std	Z+1, r25	; 0x01
    2548:	80 83       	st	Z, r24
    254a:	fe 01       	movw	r30, r28
    254c:	e7 5b       	subi	r30, 0xB7	; 183
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	80 81       	ld	r24, Z
    2552:	91 81       	ldd	r25, Z+1	; 0x01
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <Garage_System_Start+0xb86>
    2558:	fe 01       	movw	r30, r28
    255a:	e7 5b       	subi	r30, 0xB7	; 183
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2562:	de 01       	movw	r26, r28
    2564:	a5 5b       	subi	r26, 0xB5	; 181
    2566:	bf 4f       	sbci	r27, 0xFF	; 255
    2568:	fe 01       	movw	r30, r28
    256a:	e5 5b       	subi	r30, 0xB5	; 181
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	80 81       	ld	r24, Z
    2570:	91 81       	ldd	r25, Z+1	; 0x01
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	11 96       	adiw	r26, 0x01	; 1
    2576:	9c 93       	st	X, r25
    2578:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257a:	fe 01       	movw	r30, r28
    257c:	e5 5b       	subi	r30, 0xB5	; 181
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	80 81       	ld	r24, Z
    2582:	91 81       	ldd	r25, Z+1	; 0x01
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	d1 f6       	brne	.-76     	; 0x253c <Garage_System_Start+0xb6e>
    2588:	27 c0       	rjmp	.+78     	; 0x25d8 <Garage_System_Start+0xc0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258a:	8e 01       	movw	r16, r28
    258c:	05 5b       	subi	r16, 0xB5	; 181
    258e:	1f 4f       	sbci	r17, 0xFF	; 255
    2590:	fe 01       	movw	r30, r28
    2592:	e3 5b       	subi	r30, 0xB3	; 179
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	60 81       	ld	r22, Z
    2598:	71 81       	ldd	r23, Z+1	; 0x01
    259a:	82 81       	ldd	r24, Z+2	; 0x02
    259c:	93 81       	ldd	r25, Z+3	; 0x03
    259e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	f8 01       	movw	r30, r16
    25a8:	91 83       	std	Z+1, r25	; 0x01
    25aa:	80 83       	st	Z, r24
    25ac:	de 01       	movw	r26, r28
    25ae:	a9 5b       	subi	r26, 0xB9	; 185
    25b0:	bf 4f       	sbci	r27, 0xFF	; 255
    25b2:	fe 01       	movw	r30, r28
    25b4:	e5 5b       	subi	r30, 0xB5	; 181
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	80 81       	ld	r24, Z
    25ba:	91 81       	ldd	r25, Z+1	; 0x01
    25bc:	8d 93       	st	X+, r24
    25be:	9c 93       	st	X, r25
    25c0:	fe 01       	movw	r30, r28
    25c2:	e9 5b       	subi	r30, 0xB9	; 185
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	80 81       	ld	r24, Z
    25c8:	91 81       	ldd	r25, Z+1	; 0x01
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <Garage_System_Start+0xbfc>
    25ce:	fe 01       	movw	r30, r28
    25d0:	e9 5b       	subi	r30, 0xB9	; 185
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	91 83       	std	Z+1, r25	; 0x01
    25d6:	80 83       	st	Z, r24

			if (Local_u8NumberOfCars == 0)
			{
				CLCD_GoToXY(1,0);
				CLCD_vidSendString("Garage Has Space");
				for(u8 i=0 ; i<=90 ; i++) /*Open Exit Gate*/
    25d8:	de 01       	movw	r26, r28
    25da:	a4 55       	subi	r26, 0x54	; 84
    25dc:	bf 4f       	sbci	r27, 0xFF	; 255
    25de:	fe 01       	movw	r30, r28
    25e0:	e4 55       	subi	r30, 0x54	; 84
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	80 81       	ld	r24, Z
    25e6:	8f 5f       	subi	r24, 0xFF	; 255
    25e8:	8c 93       	st	X, r24
    25ea:	fe 01       	movw	r30, r28
    25ec:	e4 55       	subi	r30, 0x54	; 84
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	80 81       	ld	r24, Z
    25f2:	8b 35       	cpi	r24, 0x5B	; 91
    25f4:	08 f4       	brcc	.+2      	; 0x25f8 <Garage_System_Start+0xc2a>
    25f6:	36 cf       	rjmp	.-404    	; 0x2464 <Garage_System_Start+0xa96>
    25f8:	fe 01       	movw	r30, r28
    25fa:	ed 5b       	subi	r30, 0xBD	; 189
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	aa e7       	ldi	r26, 0x7A	; 122
    2604:	b4 e4       	ldi	r27, 0x44	; 68
    2606:	80 83       	st	Z, r24
    2608:	91 83       	std	Z+1, r25	; 0x01
    260a:	a2 83       	std	Z+2, r26	; 0x02
    260c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    260e:	8e 01       	movw	r16, r28
    2610:	01 5c       	subi	r16, 0xC1	; 193
    2612:	1f 4f       	sbci	r17, 0xFF	; 255
    2614:	fe 01       	movw	r30, r28
    2616:	ed 5b       	subi	r30, 0xBD	; 189
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	60 81       	ld	r22, Z
    261c:	71 81       	ldd	r23, Z+1	; 0x01
    261e:	82 81       	ldd	r24, Z+2	; 0x02
    2620:	93 81       	ldd	r25, Z+3	; 0x03
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	4a ef       	ldi	r20, 0xFA	; 250
    2628:	54 e4       	ldi	r21, 0x44	; 68
    262a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	f8 01       	movw	r30, r16
    2634:	80 83       	st	Z, r24
    2636:	91 83       	std	Z+1, r25	; 0x01
    2638:	a2 83       	std	Z+2, r26	; 0x02
    263a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    263c:	fe 01       	movw	r30, r28
    263e:	ff 96       	adiw	r30, 0x3f	; 63
    2640:	60 81       	ld	r22, Z
    2642:	71 81       	ldd	r23, Z+1	; 0x01
    2644:	82 81       	ldd	r24, Z+2	; 0x02
    2646:	93 81       	ldd	r25, Z+3	; 0x03
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e8       	ldi	r20, 0x80	; 128
    264e:	5f e3       	ldi	r21, 0x3F	; 63
    2650:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2654:	88 23       	and	r24, r24
    2656:	2c f4       	brge	.+10     	; 0x2662 <Garage_System_Start+0xc94>
		__ticks = 1;
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	9e af       	std	Y+62, r25	; 0x3e
    265e:	8d af       	std	Y+61, r24	; 0x3d
    2660:	46 c0       	rjmp	.+140    	; 0x26ee <Garage_System_Start+0xd20>
	else if (__tmp > 65535)
    2662:	fe 01       	movw	r30, r28
    2664:	ff 96       	adiw	r30, 0x3f	; 63
    2666:	60 81       	ld	r22, Z
    2668:	71 81       	ldd	r23, Z+1	; 0x01
    266a:	82 81       	ldd	r24, Z+2	; 0x02
    266c:	93 81       	ldd	r25, Z+3	; 0x03
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	3f ef       	ldi	r19, 0xFF	; 255
    2672:	4f e7       	ldi	r20, 0x7F	; 127
    2674:	57 e4       	ldi	r21, 0x47	; 71
    2676:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    267a:	18 16       	cp	r1, r24
    267c:	64 f5       	brge	.+88     	; 0x26d6 <Garage_System_Start+0xd08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267e:	fe 01       	movw	r30, r28
    2680:	ed 5b       	subi	r30, 0xBD	; 189
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	60 81       	ld	r22, Z
    2686:	71 81       	ldd	r23, Z+1	; 0x01
    2688:	82 81       	ldd	r24, Z+2	; 0x02
    268a:	93 81       	ldd	r25, Z+3	; 0x03
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e2       	ldi	r20, 0x20	; 32
    2692:	51 e4       	ldi	r21, 0x41	; 65
    2694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	9e af       	std	Y+62, r25	; 0x3e
    26aa:	8d af       	std	Y+61, r24	; 0x3d
    26ac:	0f c0       	rjmp	.+30     	; 0x26cc <Garage_System_Start+0xcfe>
    26ae:	88 ec       	ldi	r24, 0xC8	; 200
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	9c af       	std	Y+60, r25	; 0x3c
    26b4:	8b af       	std	Y+59, r24	; 0x3b
    26b6:	8b ad       	ldd	r24, Y+59	; 0x3b
    26b8:	9c ad       	ldd	r25, Y+60	; 0x3c
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <Garage_System_Start+0xcec>
    26be:	9c af       	std	Y+60, r25	; 0x3c
    26c0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    26c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	9e af       	std	Y+62, r25	; 0x3e
    26ca:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    26ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	69 f7       	brne	.-38     	; 0x26ae <Garage_System_Start+0xce0>
    26d4:	16 c0       	rjmp	.+44     	; 0x2702 <Garage_System_Start+0xd34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d6:	fe 01       	movw	r30, r28
    26d8:	ff 96       	adiw	r30, 0x3f	; 63
    26da:	60 81       	ld	r22, Z
    26dc:	71 81       	ldd	r23, Z+1	; 0x01
    26de:	82 81       	ldd	r24, Z+2	; 0x02
    26e0:	93 81       	ldd	r25, Z+3	; 0x03
    26e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	9e af       	std	Y+62, r25	; 0x3e
    26ec:	8d af       	std	Y+61, r24	; 0x3d
    26ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    26f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    26f2:	9a af       	std	Y+58, r25	; 0x3a
    26f4:	89 af       	std	Y+57, r24	; 0x39
    26f6:	89 ad       	ldd	r24, Y+57	; 0x39
    26f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	f1 f7       	brne	.-4      	; 0x26fa <Garage_System_Start+0xd2c>
    26fe:	9a af       	std	Y+58, r25	; 0x3a
    2700:	89 af       	std	Y+57, r24	; 0x39
				{
					Servo_Rotete(OCA , i);
					_delay_ms(10);
				}
				_delay_ms(1000);
				for(u8 i=89 ; i>0 ; i--) /*Close Exit Gate*/
    2702:	fe 01       	movw	r30, r28
    2704:	e5 55       	subi	r30, 0x55	; 85
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	89 e5       	ldi	r24, 0x59	; 89
    270a:	80 83       	st	Z, r24
    270c:	82 c0       	rjmp	.+260    	; 0x2812 <Garage_System_Start+0xe44>
				{
					Servo_Rotete(OCA , i);
    270e:	fe 01       	movw	r30, r28
    2710:	e5 55       	subi	r30, 0x55	; 85
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	82 e0       	ldi	r24, 0x02	; 2
    2716:	60 81       	ld	r22, Z
    2718:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <Servo_Rotete>
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	a0 e2       	ldi	r26, 0x20	; 32
    2722:	b1 e4       	ldi	r27, 0x41	; 65
    2724:	8d ab       	std	Y+53, r24	; 0x35
    2726:	9e ab       	std	Y+54, r25	; 0x36
    2728:	af ab       	std	Y+55, r26	; 0x37
    272a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272c:	6d a9       	ldd	r22, Y+53	; 0x35
    272e:	7e a9       	ldd	r23, Y+54	; 0x36
    2730:	8f a9       	ldd	r24, Y+55	; 0x37
    2732:	98 ad       	ldd	r25, Y+56	; 0x38
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	4a ef       	ldi	r20, 0xFA	; 250
    273a:	54 e4       	ldi	r21, 0x44	; 68
    273c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	89 ab       	std	Y+49, r24	; 0x31
    2746:	9a ab       	std	Y+50, r25	; 0x32
    2748:	ab ab       	std	Y+51, r26	; 0x33
    274a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    274c:	69 a9       	ldd	r22, Y+49	; 0x31
    274e:	7a a9       	ldd	r23, Y+50	; 0x32
    2750:	8b a9       	ldd	r24, Y+51	; 0x33
    2752:	9c a9       	ldd	r25, Y+52	; 0x34
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e8       	ldi	r20, 0x80	; 128
    275a:	5f e3       	ldi	r21, 0x3F	; 63
    275c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2760:	88 23       	and	r24, r24
    2762:	2c f4       	brge	.+10     	; 0x276e <Garage_System_Start+0xda0>
		__ticks = 1;
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	98 ab       	std	Y+48, r25	; 0x30
    276a:	8f a7       	std	Y+47, r24	; 0x2f
    276c:	3f c0       	rjmp	.+126    	; 0x27ec <Garage_System_Start+0xe1e>
	else if (__tmp > 65535)
    276e:	69 a9       	ldd	r22, Y+49	; 0x31
    2770:	7a a9       	ldd	r23, Y+50	; 0x32
    2772:	8b a9       	ldd	r24, Y+51	; 0x33
    2774:	9c a9       	ldd	r25, Y+52	; 0x34
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	3f ef       	ldi	r19, 0xFF	; 255
    277a:	4f e7       	ldi	r20, 0x7F	; 127
    277c:	57 e4       	ldi	r21, 0x47	; 71
    277e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2782:	18 16       	cp	r1, r24
    2784:	4c f5       	brge	.+82     	; 0x27d8 <Garage_System_Start+0xe0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2786:	6d a9       	ldd	r22, Y+53	; 0x35
    2788:	7e a9       	ldd	r23, Y+54	; 0x36
    278a:	8f a9       	ldd	r24, Y+55	; 0x37
    278c:	98 ad       	ldd	r25, Y+56	; 0x38
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e2       	ldi	r20, 0x20	; 32
    2794:	51 e4       	ldi	r21, 0x41	; 65
    2796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	bc 01       	movw	r22, r24
    27a0:	cd 01       	movw	r24, r26
    27a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	98 ab       	std	Y+48, r25	; 0x30
    27ac:	8f a7       	std	Y+47, r24	; 0x2f
    27ae:	0f c0       	rjmp	.+30     	; 0x27ce <Garage_System_Start+0xe00>
    27b0:	88 ec       	ldi	r24, 0xC8	; 200
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	9e a7       	std	Y+46, r25	; 0x2e
    27b6:	8d a7       	std	Y+45, r24	; 0x2d
    27b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    27ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	f1 f7       	brne	.-4      	; 0x27bc <Garage_System_Start+0xdee>
    27c0:	9e a7       	std	Y+46, r25	; 0x2e
    27c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    27c6:	98 a9       	ldd	r25, Y+48	; 0x30
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	98 ab       	std	Y+48, r25	; 0x30
    27cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    27d0:	98 a9       	ldd	r25, Y+48	; 0x30
    27d2:	00 97       	sbiw	r24, 0x00	; 0
    27d4:	69 f7       	brne	.-38     	; 0x27b0 <Garage_System_Start+0xde2>
    27d6:	14 c0       	rjmp	.+40     	; 0x2800 <Garage_System_Start+0xe32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d8:	69 a9       	ldd	r22, Y+49	; 0x31
    27da:	7a a9       	ldd	r23, Y+50	; 0x32
    27dc:	8b a9       	ldd	r24, Y+51	; 0x33
    27de:	9c a9       	ldd	r25, Y+52	; 0x34
    27e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	98 ab       	std	Y+48, r25	; 0x30
    27ea:	8f a7       	std	Y+47, r24	; 0x2f
    27ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ee:	98 a9       	ldd	r25, Y+48	; 0x30
    27f0:	9c a7       	std	Y+44, r25	; 0x2c
    27f2:	8b a7       	std	Y+43, r24	; 0x2b
    27f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    27f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <Garage_System_Start+0xe2a>
    27fc:	9c a7       	std	Y+44, r25	; 0x2c
    27fe:	8b a7       	std	Y+43, r24	; 0x2b
				{
					Servo_Rotete(OCA , i);
					_delay_ms(10);
				}
				_delay_ms(1000);
				for(u8 i=89 ; i>0 ; i--) /*Close Exit Gate*/
    2800:	de 01       	movw	r26, r28
    2802:	a5 55       	subi	r26, 0x55	; 85
    2804:	bf 4f       	sbci	r27, 0xFF	; 255
    2806:	fe 01       	movw	r30, r28
    2808:	e5 55       	subi	r30, 0x55	; 85
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	80 81       	ld	r24, Z
    280e:	81 50       	subi	r24, 0x01	; 1
    2810:	8c 93       	st	X, r24
    2812:	fe 01       	movw	r30, r28
    2814:	e5 55       	subi	r30, 0x55	; 85
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	80 81       	ld	r24, Z
    281a:	88 23       	and	r24, r24
    281c:	09 f0       	breq	.+2      	; 0x2820 <Garage_System_Start+0xe52>
    281e:	77 cf       	rjmp	.-274    	; 0x270e <Garage_System_Start+0xd40>
    2820:	ef c8       	rjmp	.-3618   	; 0x1a00 <Garage_System_Start+0x32>
					_delay_ms(10);
				}
				continue ;
			}

			CLCD_GoToXY(1,0);
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	60 e0       	ldi	r22, 0x00	; 0
    2826:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_vidSendString("Garage Has Space");
    282a:	81 e7       	ldi	r24, 0x71	; 113
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
			for(u8 i=0 ; i<=90 ; i++) /*Open Exit Gate*/
    2832:	fe 01       	movw	r30, r28
    2834:	e6 55       	subi	r30, 0x56	; 86
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	10 82       	st	Z, r1
    283a:	82 c0       	rjmp	.+260    	; 0x2940 <Garage_System_Start+0xf72>
			{
				Servo_Rotete(OCA , i);
    283c:	fe 01       	movw	r30, r28
    283e:	e6 55       	subi	r30, 0x56	; 86
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	82 e0       	ldi	r24, 0x02	; 2
    2844:	60 81       	ld	r22, Z
    2846:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <Servo_Rotete>
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	a0 e2       	ldi	r26, 0x20	; 32
    2850:	b1 e4       	ldi	r27, 0x41	; 65
    2852:	8f a3       	std	Y+39, r24	; 0x27
    2854:	98 a7       	std	Y+40, r25	; 0x28
    2856:	a9 a7       	std	Y+41, r26	; 0x29
    2858:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285a:	6f a1       	ldd	r22, Y+39	; 0x27
    285c:	78 a5       	ldd	r23, Y+40	; 0x28
    285e:	89 a5       	ldd	r24, Y+41	; 0x29
    2860:	9a a5       	ldd	r25, Y+42	; 0x2a
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	4a ef       	ldi	r20, 0xFA	; 250
    2868:	54 e4       	ldi	r21, 0x44	; 68
    286a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	8b a3       	std	Y+35, r24	; 0x23
    2874:	9c a3       	std	Y+36, r25	; 0x24
    2876:	ad a3       	std	Y+37, r26	; 0x25
    2878:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    287a:	6b a1       	ldd	r22, Y+35	; 0x23
    287c:	7c a1       	ldd	r23, Y+36	; 0x24
    287e:	8d a1       	ldd	r24, Y+37	; 0x25
    2880:	9e a1       	ldd	r25, Y+38	; 0x26
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e8       	ldi	r20, 0x80	; 128
    2888:	5f e3       	ldi	r21, 0x3F	; 63
    288a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    288e:	88 23       	and	r24, r24
    2890:	2c f4       	brge	.+10     	; 0x289c <Garage_System_Start+0xece>
		__ticks = 1;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	9a a3       	std	Y+34, r25	; 0x22
    2898:	89 a3       	std	Y+33, r24	; 0x21
    289a:	3f c0       	rjmp	.+126    	; 0x291a <Garage_System_Start+0xf4c>
	else if (__tmp > 65535)
    289c:	6b a1       	ldd	r22, Y+35	; 0x23
    289e:	7c a1       	ldd	r23, Y+36	; 0x24
    28a0:	8d a1       	ldd	r24, Y+37	; 0x25
    28a2:	9e a1       	ldd	r25, Y+38	; 0x26
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	3f ef       	ldi	r19, 0xFF	; 255
    28a8:	4f e7       	ldi	r20, 0x7F	; 127
    28aa:	57 e4       	ldi	r21, 0x47	; 71
    28ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28b0:	18 16       	cp	r1, r24
    28b2:	4c f5       	brge	.+82     	; 0x2906 <Garage_System_Start+0xf38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b4:	6f a1       	ldd	r22, Y+39	; 0x27
    28b6:	78 a5       	ldd	r23, Y+40	; 0x28
    28b8:	89 a5       	ldd	r24, Y+41	; 0x29
    28ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e2       	ldi	r20, 0x20	; 32
    28c2:	51 e4       	ldi	r21, 0x41	; 65
    28c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	bc 01       	movw	r22, r24
    28ce:	cd 01       	movw	r24, r26
    28d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	9a a3       	std	Y+34, r25	; 0x22
    28da:	89 a3       	std	Y+33, r24	; 0x21
    28dc:	0f c0       	rjmp	.+30     	; 0x28fc <Garage_System_Start+0xf2e>
    28de:	88 ec       	ldi	r24, 0xC8	; 200
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	98 a3       	std	Y+32, r25	; 0x20
    28e4:	8f 8f       	std	Y+31, r24	; 0x1f
    28e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28e8:	98 a1       	ldd	r25, Y+32	; 0x20
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <Garage_System_Start+0xf1c>
    28ee:	98 a3       	std	Y+32, r25	; 0x20
    28f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f2:	89 a1       	ldd	r24, Y+33	; 0x21
    28f4:	9a a1       	ldd	r25, Y+34	; 0x22
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	9a a3       	std	Y+34, r25	; 0x22
    28fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fc:	89 a1       	ldd	r24, Y+33	; 0x21
    28fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	69 f7       	brne	.-38     	; 0x28de <Garage_System_Start+0xf10>
    2904:	14 c0       	rjmp	.+40     	; 0x292e <Garage_System_Start+0xf60>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2906:	6b a1       	ldd	r22, Y+35	; 0x23
    2908:	7c a1       	ldd	r23, Y+36	; 0x24
    290a:	8d a1       	ldd	r24, Y+37	; 0x25
    290c:	9e a1       	ldd	r25, Y+38	; 0x26
    290e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	9a a3       	std	Y+34, r25	; 0x22
    2918:	89 a3       	std	Y+33, r24	; 0x21
    291a:	89 a1       	ldd	r24, Y+33	; 0x21
    291c:	9a a1       	ldd	r25, Y+34	; 0x22
    291e:	9e 8f       	std	Y+30, r25	; 0x1e
    2920:	8d 8f       	std	Y+29, r24	; 0x1d
    2922:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2924:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	f1 f7       	brne	.-4      	; 0x2926 <Garage_System_Start+0xf58>
    292a:	9e 8f       	std	Y+30, r25	; 0x1e
    292c:	8d 8f       	std	Y+29, r24	; 0x1d
				continue ;
			}

			CLCD_GoToXY(1,0);
			CLCD_vidSendString("Garage Has Space");
			for(u8 i=0 ; i<=90 ; i++) /*Open Exit Gate*/
    292e:	de 01       	movw	r26, r28
    2930:	a6 55       	subi	r26, 0x56	; 86
    2932:	bf 4f       	sbci	r27, 0xFF	; 255
    2934:	fe 01       	movw	r30, r28
    2936:	e6 55       	subi	r30, 0x56	; 86
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	80 81       	ld	r24, Z
    293c:	8f 5f       	subi	r24, 0xFF	; 255
    293e:	8c 93       	st	X, r24
    2940:	fe 01       	movw	r30, r28
    2942:	e6 55       	subi	r30, 0x56	; 86
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	80 81       	ld	r24, Z
    2948:	8b 35       	cpi	r24, 0x5B	; 91
    294a:	08 f4       	brcc	.+2      	; 0x294e <Garage_System_Start+0xf80>
    294c:	77 cf       	rjmp	.-274    	; 0x283c <Garage_System_Start+0xe6e>
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	aa e7       	ldi	r26, 0x7A	; 122
    2954:	b4 e4       	ldi	r27, 0x44	; 68
    2956:	89 8f       	std	Y+25, r24	; 0x19
    2958:	9a 8f       	std	Y+26, r25	; 0x1a
    295a:	ab 8f       	std	Y+27, r26	; 0x1b
    295c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295e:	69 8d       	ldd	r22, Y+25	; 0x19
    2960:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2962:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2964:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	4a ef       	ldi	r20, 0xFA	; 250
    296c:	54 e4       	ldi	r21, 0x44	; 68
    296e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	8d 8b       	std	Y+21, r24	; 0x15
    2978:	9e 8b       	std	Y+22, r25	; 0x16
    297a:	af 8b       	std	Y+23, r26	; 0x17
    297c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    297e:	6d 89       	ldd	r22, Y+21	; 0x15
    2980:	7e 89       	ldd	r23, Y+22	; 0x16
    2982:	8f 89       	ldd	r24, Y+23	; 0x17
    2984:	98 8d       	ldd	r25, Y+24	; 0x18
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e8       	ldi	r20, 0x80	; 128
    298c:	5f e3       	ldi	r21, 0x3F	; 63
    298e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2992:	88 23       	and	r24, r24
    2994:	2c f4       	brge	.+10     	; 0x29a0 <Garage_System_Start+0xfd2>
		__ticks = 1;
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	9c 8b       	std	Y+20, r25	; 0x14
    299c:	8b 8b       	std	Y+19, r24	; 0x13
    299e:	3f c0       	rjmp	.+126    	; 0x2a1e <Garage_System_Start+0x1050>
	else if (__tmp > 65535)
    29a0:	6d 89       	ldd	r22, Y+21	; 0x15
    29a2:	7e 89       	ldd	r23, Y+22	; 0x16
    29a4:	8f 89       	ldd	r24, Y+23	; 0x17
    29a6:	98 8d       	ldd	r25, Y+24	; 0x18
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	3f ef       	ldi	r19, 0xFF	; 255
    29ac:	4f e7       	ldi	r20, 0x7F	; 127
    29ae:	57 e4       	ldi	r21, 0x47	; 71
    29b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b4:	18 16       	cp	r1, r24
    29b6:	4c f5       	brge	.+82     	; 0x2a0a <Garage_System_Start+0x103c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b8:	69 8d       	ldd	r22, Y+25	; 0x19
    29ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e2       	ldi	r20, 0x20	; 32
    29c6:	51 e4       	ldi	r21, 0x41	; 65
    29c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	bc 01       	movw	r22, r24
    29d2:	cd 01       	movw	r24, r26
    29d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	9c 8b       	std	Y+20, r25	; 0x14
    29de:	8b 8b       	std	Y+19, r24	; 0x13
    29e0:	0f c0       	rjmp	.+30     	; 0x2a00 <Garage_System_Start+0x1032>
    29e2:	88 ec       	ldi	r24, 0xC8	; 200
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9a 8b       	std	Y+18, r25	; 0x12
    29e8:	89 8b       	std	Y+17, r24	; 0x11
    29ea:	89 89       	ldd	r24, Y+17	; 0x11
    29ec:	9a 89       	ldd	r25, Y+18	; 0x12
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <Garage_System_Start+0x1020>
    29f2:	9a 8b       	std	Y+18, r25	; 0x12
    29f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f6:	8b 89       	ldd	r24, Y+19	; 0x13
    29f8:	9c 89       	ldd	r25, Y+20	; 0x14
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	9c 8b       	std	Y+20, r25	; 0x14
    29fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a00:	8b 89       	ldd	r24, Y+19	; 0x13
    2a02:	9c 89       	ldd	r25, Y+20	; 0x14
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	69 f7       	brne	.-38     	; 0x29e2 <Garage_System_Start+0x1014>
    2a08:	14 c0       	rjmp	.+40     	; 0x2a32 <Garage_System_Start+0x1064>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a10:	98 8d       	ldd	r25, Y+24	; 0x18
    2a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	9c 8b       	std	Y+20, r25	; 0x14
    2a1c:	8b 8b       	std	Y+19, r24	; 0x13
    2a1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a20:	9c 89       	ldd	r25, Y+20	; 0x14
    2a22:	98 8b       	std	Y+16, r25	; 0x10
    2a24:	8f 87       	std	Y+15, r24	; 0x0f
    2a26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a28:	98 89       	ldd	r25, Y+16	; 0x10
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <Garage_System_Start+0x105c>
    2a2e:	98 8b       	std	Y+16, r25	; 0x10
    2a30:	8f 87       	std	Y+15, r24	; 0x0f
			{
				Servo_Rotete(OCA , i);
				_delay_ms(10);
			}
			_delay_ms(1000);
			for(u8 i=89 ; i>0 ; i--) /*Close Exit Gate*/
    2a32:	fe 01       	movw	r30, r28
    2a34:	e7 55       	subi	r30, 0x57	; 87
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	89 e5       	ldi	r24, 0x59	; 89
    2a3a:	80 83       	st	Z, r24
    2a3c:	82 c0       	rjmp	.+260    	; 0x2b42 <Garage_System_Start+0x1174>
			{
				Servo_Rotete(OCA , i);
    2a3e:	fe 01       	movw	r30, r28
    2a40:	e7 55       	subi	r30, 0x57	; 87
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	82 e0       	ldi	r24, 0x02	; 2
    2a46:	60 81       	ld	r22, Z
    2a48:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <Servo_Rotete>
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	a0 e2       	ldi	r26, 0x20	; 32
    2a52:	b1 e4       	ldi	r27, 0x41	; 65
    2a54:	8b 87       	std	Y+11, r24	; 0x0b
    2a56:	9c 87       	std	Y+12, r25	; 0x0c
    2a58:	ad 87       	std	Y+13, r26	; 0x0d
    2a5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	4a ef       	ldi	r20, 0xFA	; 250
    2a6a:	54 e4       	ldi	r21, 0x44	; 68
    2a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	8f 83       	std	Y+7, r24	; 0x07
    2a76:	98 87       	std	Y+8, r25	; 0x08
    2a78:	a9 87       	std	Y+9, r26	; 0x09
    2a7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a7e:	78 85       	ldd	r23, Y+8	; 0x08
    2a80:	89 85       	ldd	r24, Y+9	; 0x09
    2a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	40 e8       	ldi	r20, 0x80	; 128
    2a8a:	5f e3       	ldi	r21, 0x3F	; 63
    2a8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a90:	88 23       	and	r24, r24
    2a92:	2c f4       	brge	.+10     	; 0x2a9e <Garage_System_Start+0x10d0>
		__ticks = 1;
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	9e 83       	std	Y+6, r25	; 0x06
    2a9a:	8d 83       	std	Y+5, r24	; 0x05
    2a9c:	3f c0       	rjmp	.+126    	; 0x2b1c <Garage_System_Start+0x114e>
	else if (__tmp > 65535)
    2a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa0:	78 85       	ldd	r23, Y+8	; 0x08
    2aa2:	89 85       	ldd	r24, Y+9	; 0x09
    2aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	3f ef       	ldi	r19, 0xFF	; 255
    2aaa:	4f e7       	ldi	r20, 0x7F	; 127
    2aac:	57 e4       	ldi	r21, 0x47	; 71
    2aae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ab2:	18 16       	cp	r1, r24
    2ab4:	4c f5       	brge	.+82     	; 0x2b08 <Garage_System_Start+0x113a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2abc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	40 e2       	ldi	r20, 0x20	; 32
    2ac4:	51 e4       	ldi	r21, 0x41	; 65
    2ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	bc 01       	movw	r22, r24
    2ad0:	cd 01       	movw	r24, r26
    2ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	9e 83       	std	Y+6, r25	; 0x06
    2adc:	8d 83       	std	Y+5, r24	; 0x05
    2ade:	0f c0       	rjmp	.+30     	; 0x2afe <Garage_System_Start+0x1130>
    2ae0:	88 ec       	ldi	r24, 0xC8	; 200
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	9c 83       	std	Y+4, r25	; 0x04
    2ae6:	8b 83       	std	Y+3, r24	; 0x03
    2ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aea:	9c 81       	ldd	r25, Y+4	; 0x04
    2aec:	01 97       	sbiw	r24, 0x01	; 1
    2aee:	f1 f7       	brne	.-4      	; 0x2aec <Garage_System_Start+0x111e>
    2af0:	9c 83       	std	Y+4, r25	; 0x04
    2af2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af4:	8d 81       	ldd	r24, Y+5	; 0x05
    2af6:	9e 81       	ldd	r25, Y+6	; 0x06
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	9e 83       	std	Y+6, r25	; 0x06
    2afc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afe:	8d 81       	ldd	r24, Y+5	; 0x05
    2b00:	9e 81       	ldd	r25, Y+6	; 0x06
    2b02:	00 97       	sbiw	r24, 0x00	; 0
    2b04:	69 f7       	brne	.-38     	; 0x2ae0 <Garage_System_Start+0x1112>
    2b06:	14 c0       	rjmp	.+40     	; 0x2b30 <Garage_System_Start+0x1162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b08:	6f 81       	ldd	r22, Y+7	; 0x07
    2b0a:	78 85       	ldd	r23, Y+8	; 0x08
    2b0c:	89 85       	ldd	r24, Y+9	; 0x09
    2b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	9e 83       	std	Y+6, r25	; 0x06
    2b1a:	8d 83       	std	Y+5, r24	; 0x05
    2b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b20:	9a 83       	std	Y+2, r25	; 0x02
    2b22:	89 83       	std	Y+1, r24	; 0x01
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	9a 81       	ldd	r25, Y+2	; 0x02
    2b28:	01 97       	sbiw	r24, 0x01	; 1
    2b2a:	f1 f7       	brne	.-4      	; 0x2b28 <Garage_System_Start+0x115a>
    2b2c:	9a 83       	std	Y+2, r25	; 0x02
    2b2e:	89 83       	std	Y+1, r24	; 0x01
			{
				Servo_Rotete(OCA , i);
				_delay_ms(10);
			}
			_delay_ms(1000);
			for(u8 i=89 ; i>0 ; i--) /*Close Exit Gate*/
    2b30:	de 01       	movw	r26, r28
    2b32:	a7 55       	subi	r26, 0x57	; 87
    2b34:	bf 4f       	sbci	r27, 0xFF	; 255
    2b36:	fe 01       	movw	r30, r28
    2b38:	e7 55       	subi	r30, 0x57	; 87
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	80 81       	ld	r24, Z
    2b3e:	81 50       	subi	r24, 0x01	; 1
    2b40:	8c 93       	st	X, r24
    2b42:	fe 01       	movw	r30, r28
    2b44:	e7 55       	subi	r30, 0x57	; 87
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	80 81       	ld	r24, Z
    2b4a:	88 23       	and	r24, r24
    2b4c:	09 f0       	breq	.+2      	; 0x2b50 <Garage_System_Start+0x1182>
    2b4e:	77 cf       	rjmp	.-274    	; 0x2a3e <Garage_System_Start+0x1070>
    2b50:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <Garage_System_Start+0x32>

00002b54 <ISR>:
		}
	}
}

void ISR (void)
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	cd b7       	in	r28, 0x3d	; 61
    2b5a:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8NumberOfCars = 0 ;

	Local_u8NumberOfCars ++ ;
    2b5c:	80 91 b8 00 	lds	r24, 0x00B8
    2b60:	8f 5f       	subi	r24, 0xFF	; 255
    2b62:	80 93 b8 00 	sts	0x00B8, r24

	CLCD_voidSendCommand(1) ;
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	CLCD_vidSendString("There Are ") ;
    2b6c:	82 e8       	ldi	r24, 0x82	; 130
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
	CLCD_GoToXY(0,9) ;
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	69 e0       	ldi	r22, 0x09	; 9
    2b78:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
	CLCD_write_Number(Local_u8NumberOfCars);
    2b7c:	80 91 b8 00 	lds	r24, 0x00B8
    2b80:	88 2f       	mov	r24, r24
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_write_Number>
	CLCD_GoToXY(0,10);
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	6a e0       	ldi	r22, 0x0A	; 10
    2b8c:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
	CLCD_vidSendString(" Cars") ;
    2b90:	8d e8       	ldi	r24, 0x8D	; 141
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
	if (Local_u8NumberOfCars == 3)
    2b98:	80 91 b8 00 	lds	r24, 0x00B8
    2b9c:	83 30       	cpi	r24, 0x03	; 3
    2b9e:	59 f4       	brne	.+22     	; 0x2bb6 <ISR+0x62>
	{
		CLCD_GoToXY(1,0);
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
		CLCD_vidSendString("Garage Is Full");
    2ba8:	83 e9       	ldi	r24, 0x93	; 147
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
		Disable_Global_Interrupt();
    2bb0:	0e 94 02 16 	call	0x2c04	; 0x2c04 <Disable_Global_Interrupt>
    2bb4:	08 c0       	rjmp	.+16     	; 0x2bc6 <ISR+0x72>
	}
	else
	{
		CLCD_GoToXY(1,0);
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	60 e0       	ldi	r22, 0x00	; 0
    2bba:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
		CLCD_vidSendString("Garage Has Space");
    2bbe:	81 e7       	ldi	r24, 0x71	; 113
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
	}
}
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	08 95       	ret

00002bcc <GLOBAL_Init>:

#include "avr/delay.h"


void GLOBAL_Init(void)
{
    2bcc:	df 93       	push	r29
    2bce:	cf 93       	push	r28
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
#if Status == ENABLED
	SET_BIT(I,SREG);
    2bd4:	af e5       	ldi	r26, 0x5F	; 95
    2bd6:	b0 e0       	ldi	r27, 0x00	; 0
    2bd8:	ef e5       	ldi	r30, 0x5F	; 95
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	80 68       	ori	r24, 0x80	; 128
    2be0:	8c 93       	st	X, r24
#elif Status == DISABLED
	CLR_BIT(I,SREG);
#endif
}
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	08 95       	ret

00002be8 <Enable_Global_Interrupt>:


void Enable_Global_Interrupt()
{
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(I,SREG);
    2bf0:	af e5       	ldi	r26, 0x5F	; 95
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	ef e5       	ldi	r30, 0x5F	; 95
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	80 68       	ori	r24, 0x80	; 128
    2bfc:	8c 93       	st	X, r24

}
    2bfe:	cf 91       	pop	r28
    2c00:	df 91       	pop	r29
    2c02:	08 95       	ret

00002c04 <Disable_Global_Interrupt>:


void Disable_Global_Interrupt()
{
    2c04:	df 93       	push	r29
    2c06:	cf 93       	push	r28
    2c08:	cd b7       	in	r28, 0x3d	; 61
    2c0a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(I,SREG);
    2c0c:	af e5       	ldi	r26, 0x5F	; 95
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	ef e5       	ldi	r30, 0x5F	; 95
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	8f 77       	andi	r24, 0x7F	; 127
    2c18:	8c 93       	st	X, r24
}
    2c1a:	cf 91       	pop	r28
    2c1c:	df 91       	pop	r29
    2c1e:	08 95       	ret

00002c20 <Timer0_FastPWM_Mode>:
#include "PWM_interface.h"
#include "PWM_CFG.h"
#include "PWM_private.h"

void Timer0_FastPWM_Mode()
{
    2c20:	df 93       	push	r29
    2c22:	cf 93       	push	r28
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62

	/*Select FPWM*/
	SET_BIT(WGM00 , TCCR0);
    2c28:	a3 e5       	ldi	r26, 0x53	; 83
    2c2a:	b0 e0       	ldi	r27, 0x00	; 0
    2c2c:	e3 e5       	ldi	r30, 0x53	; 83
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	80 81       	ld	r24, Z
    2c32:	80 64       	ori	r24, 0x40	; 64
    2c34:	8c 93       	st	X, r24
	SET_BIT(WGM01 , TCCR0);
    2c36:	a3 e5       	ldi	r26, 0x53	; 83
    2c38:	b0 e0       	ldi	r27, 0x00	; 0
    2c3a:	e3 e5       	ldi	r30, 0x53	; 83
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	80 81       	ld	r24, Z
    2c40:	88 60       	ori	r24, 0x08	; 8
    2c42:	8c 93       	st	X, r24




	/*Select Non Interval Mode*/
	SET_BIT( COM01 , TCCR0);
    2c44:	a3 e5       	ldi	r26, 0x53	; 83
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	e3 e5       	ldi	r30, 0x53	; 83
    2c4a:	f0 e0       	ldi	r31, 0x00	; 0
    2c4c:	80 81       	ld	r24, Z
    2c4e:	80 62       	ori	r24, 0x20	; 32
    2c50:	8c 93       	st	X, r24
	CLR_BIT( COM00 , TCCR0 );
    2c52:	a3 e5       	ldi	r26, 0x53	; 83
    2c54:	b0 e0       	ldi	r27, 0x00	; 0
    2c56:	e3 e5       	ldi	r30, 0x53	; 83
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	80 81       	ld	r24, Z
    2c5c:	8f 7e       	andi	r24, 0xEF	; 239
    2c5e:	8c 93       	st	X, r24

#if Prescaller_Select == Divison_By_8  /*Select Prescaller 8*/
	TCCR0&=Divison_Factor_Mask;
    2c60:	a3 e5       	ldi	r26, 0x53	; 83
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	e3 e5       	ldi	r30, 0x53	; 83
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	88 7f       	andi	r24, 0xF8	; 248
    2c6c:	8c 93       	st	X, r24
	TCCR0|=Prescaller_Select;
    2c6e:	a3 e5       	ldi	r26, 0x53	; 83
    2c70:	b0 e0       	ldi	r27, 0x00	; 0
    2c72:	e3 e5       	ldi	r30, 0x53	; 83
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 81       	ld	r24, Z
    2c78:	82 60       	ori	r24, 0x02	; 2
    2c7a:	8c 93       	st	X, r24
	TCCR0&=Divison_Factor_Mask;
	TCCR0|=Prescaller_Select;
#endif


}
    2c7c:	cf 91       	pop	r28
    2c7e:	df 91       	pop	r29
    2c80:	08 95       	ret

00002c82 <TIMR0_VidSetCompMatchVal>:
void TIMR0_VidSetCompMatchVal(u8 Copy_u8CompVal)
{
    2c82:	df 93       	push	r29
    2c84:	cf 93       	push	r28
    2c86:	0f 92       	push	r0
    2c88:	cd b7       	in	r28, 0x3d	; 61
    2c8a:	de b7       	in	r29, 0x3e	; 62
    2c8c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CompVal;
    2c8e:	ec e5       	ldi	r30, 0x5C	; 92
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	80 83       	st	Z, r24
}
    2c96:	0f 90       	pop	r0
    2c98:	cf 91       	pop	r28
    2c9a:	df 91       	pop	r29
    2c9c:	08 95       	ret

00002c9e <Timer1_FastPWM_Mode>:

void Timer1_FastPWM_Mode()
{
    2c9e:	df 93       	push	r29
    2ca0:	cf 93       	push	r28
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
	/*Select WaveForm Mode FPWM*/
	SET_BIT(WGM13 , TCCR1B);
    2ca6:	ae e4       	ldi	r26, 0x4E	; 78
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	ee e4       	ldi	r30, 0x4E	; 78
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	80 81       	ld	r24, Z
    2cb0:	80 61       	ori	r24, 0x10	; 16
    2cb2:	8c 93       	st	X, r24
	SET_BIT(WGM12 , TCCR1B);
    2cb4:	ae e4       	ldi	r26, 0x4E	; 78
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	ee e4       	ldi	r30, 0x4E	; 78
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	88 60       	ori	r24, 0x08	; 8
    2cc0:	8c 93       	st	X, r24
	SET_BIT(WGM11 , TCCR1A);
    2cc2:	af e4       	ldi	r26, 0x4F	; 79
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	ef e4       	ldi	r30, 0x4F	; 79
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	82 60       	ori	r24, 0x02	; 2
    2cce:	8c 93       	st	X, r24
	CLR_BIT(WGM10 , TCCR1A);
    2cd0:	af e4       	ldi	r26, 0x4F	; 79
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	ef e4       	ldi	r30, 0x4F	; 79
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	8e 7f       	andi	r24, 0xFE	; 254
    2cdc:	8c 93       	st	X, r24


	/*Select FPWM OCA Non Inverted Mode*/
	SET_BIT(COM1A1 , TCCR1A) ;
    2cde:	af e4       	ldi	r26, 0x4F	; 79
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	ef e4       	ldi	r30, 0x4F	; 79
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	80 68       	ori	r24, 0x80	; 128
    2cea:	8c 93       	st	X, r24
	CLR_BIT(COM1A0 , TCCR1A) ;
    2cec:	af e4       	ldi	r26, 0x4F	; 79
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	ef e4       	ldi	r30, 0x4F	; 79
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	8f 7b       	andi	r24, 0xBF	; 191
    2cf8:	8c 93       	st	X, r24

	/*Select FPWM OCB Non Inverted Mode*/
	SET_BIT(COM1B1 , TCCR1A) ;
    2cfa:	af e4       	ldi	r26, 0x4F	; 79
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	ef e4       	ldi	r30, 0x4F	; 79
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	80 62       	ori	r24, 0x20	; 32
    2d06:	8c 93       	st	X, r24
	CLR_BIT(COM1B0 , TCCR1A) ;
    2d08:	af e4       	ldi	r26, 0x4F	; 79
    2d0a:	b0 e0       	ldi	r27, 0x00	; 0
    2d0c:	ef e4       	ldi	r30, 0x4F	; 79
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	80 81       	ld	r24, Z
    2d12:	8f 7e       	andi	r24, 0xEF	; 239
    2d14:	8c 93       	st	X, r24


	/*Prescaller*/
#if Prescaller_Select == Divison_By_8
	TCCR1B &=Divison_Factor_Mask ;
    2d16:	ae e4       	ldi	r26, 0x4E	; 78
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	ee e4       	ldi	r30, 0x4E	; 78
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	88 7f       	andi	r24, 0xF8	; 248
    2d22:	8c 93       	st	X, r24
	TCCR1B |=Prescaller_Select ;
    2d24:	ae e4       	ldi	r26, 0x4E	; 78
    2d26:	b0 e0       	ldi	r27, 0x00	; 0
    2d28:	ee e4       	ldi	r30, 0x4E	; 78
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	80 81       	ld	r24, Z
    2d2e:	82 60       	ori	r24, 0x02	; 2
    2d30:	8c 93       	st	X, r24
#elif Prescaller_Select == Divison_By_64
	TCCR1B &=Divison_Factor_Mask ;
	TCCR1B |=Prescaller_Select ;
#endif
}
    2d32:	cf 91       	pop	r28
    2d34:	df 91       	pop	r29
    2d36:	08 95       	ret

00002d38 <SetTimer1_ICRval>:

void SetTimer1_ICRval(u16 Copy_ICRVal)
{
    2d38:	df 93       	push	r29
    2d3a:	cf 93       	push	r28
    2d3c:	00 d0       	rcall	.+0      	; 0x2d3e <SetTimer1_ICRval+0x6>
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
    2d42:	9a 83       	std	Y+2, r25	; 0x02
    2d44:	89 83       	std	Y+1, r24	; 0x01
	ICR1L = Copy_ICRVal ;
    2d46:	e6 e4       	ldi	r30, 0x46	; 70
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4e:	91 83       	std	Z+1, r25	; 0x01
    2d50:	80 83       	st	Z, r24
}
    2d52:	0f 90       	pop	r0
    2d54:	0f 90       	pop	r0
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	08 95       	ret

00002d5c <TIMR1_VidSetOCACompMatchVal>:

void TIMR1_VidSetOCACompMatchVal(u16 Copy_u16CompVal)
{
    2d5c:	df 93       	push	r29
    2d5e:	cf 93       	push	r28
    2d60:	00 d0       	rcall	.+0      	; 0x2d62 <TIMR1_VidSetOCACompMatchVal+0x6>
    2d62:	cd b7       	in	r28, 0x3d	; 61
    2d64:	de b7       	in	r29, 0x3e	; 62
    2d66:	9a 83       	std	Y+2, r25	; 0x02
    2d68:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL = Copy_u16CompVal;
    2d6a:	ea e4       	ldi	r30, 0x4A	; 74
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	9a 81       	ldd	r25, Y+2	; 0x02
    2d72:	91 83       	std	Z+1, r25	; 0x01
    2d74:	80 83       	st	Z, r24
}
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	cf 91       	pop	r28
    2d7c:	df 91       	pop	r29
    2d7e:	08 95       	ret

00002d80 <TIMR1_VidSetOCBCompMatchVal>:

void TIMR1_VidSetOCBCompMatchVal(u16 Copy_u16CompVal)
{
    2d80:	df 93       	push	r29
    2d82:	cf 93       	push	r28
    2d84:	00 d0       	rcall	.+0      	; 0x2d86 <TIMR1_VidSetOCBCompMatchVal+0x6>
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	9a 83       	std	Y+2, r25	; 0x02
    2d8c:	89 83       	std	Y+1, r24	; 0x01
	OCR1BL = Copy_u16CompVal;
    2d8e:	e8 e4       	ldi	r30, 0x48	; 72
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	9a 81       	ldd	r25, Y+2	; 0x02
    2d96:	91 83       	std	Z+1, r25	; 0x01
    2d98:	80 83       	st	Z, r24
}
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	cf 91       	pop	r28
    2da0:	df 91       	pop	r29
    2da2:	08 95       	ret

00002da4 <Servo_Rotete>:
#include "Servo_Interface.h"



u8 Servo_Rotete(u8 Copy_ChannelId , u8 Copy_Degree)
{
    2da4:	0f 93       	push	r16
    2da6:	1f 93       	push	r17
    2da8:	df 93       	push	r29
    2daa:	cf 93       	push	r28
    2dac:	00 d0       	rcall	.+0      	; 0x2dae <Servo_Rotete+0xa>
    2dae:	0f 92       	push	r0
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	8a 83       	std	Y+2, r24	; 0x02
    2db6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_ErrorState = OK ;
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_Degree == 0 && Copy_ChannelId == OCA)
    2dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbe:	88 23       	and	r24, r24
    2dc0:	69 f4       	brne	.+26     	; 0x2ddc <Servo_Rotete+0x38>
    2dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc4:	82 30       	cpi	r24, 0x02	; 2
    2dc6:	51 f4       	brne	.+20     	; 0x2ddc <Servo_Rotete+0x38>
	{
		DIO_vidSetPinDir(DIO_PORTD , DIO_PIN5 , DIO_OUTPUT);
    2dc8:	83 e0       	ldi	r24, 0x03	; 3
    2dca:	65 e0       	ldi	r22, 0x05	; 5
    2dcc:	41 e0       	ldi	r20, 0x01	; 1
    2dce:	0e 94 ce 09 	call	0x139c	; 0x139c <DIO_vidSetPinDir>
		TIMR1_VidSetOCACompMatchVal(750) ;
    2dd2:	8e ee       	ldi	r24, 0xEE	; 238
    2dd4:	92 e0       	ldi	r25, 0x02	; 2
    2dd6:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <TIMR1_VidSetOCACompMatchVal>
    2dda:	88 c0       	rjmp	.+272    	; 0x2eec <Servo_Rotete+0x148>
	}
	else if (Copy_Degree == 0 && Copy_ChannelId == OCB)
    2ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dde:	88 23       	and	r24, r24
    2de0:	79 f4       	brne	.+30     	; 0x2e00 <Servo_Rotete+0x5c>
    2de2:	8a 81       	ldd	r24, Y+2	; 0x02
    2de4:	83 30       	cpi	r24, 0x03	; 3
    2de6:	61 f4       	brne	.+24     	; 0x2e00 <Servo_Rotete+0x5c>
	{
		DIO_vidSetPinDir(DIO_PORTD , DIO_PIN4 , DIO_OUTPUT);
    2de8:	83 e0       	ldi	r24, 0x03	; 3
    2dea:	64 e0       	ldi	r22, 0x04	; 4
    2dec:	41 e0       	ldi	r20, 0x01	; 1
    2dee:	0e 94 ce 09 	call	0x139c	; 0x139c <DIO_vidSetPinDir>
		OCR1BL =  750 ;
    2df2:	e8 e4       	ldi	r30, 0x48	; 72
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	8e ee       	ldi	r24, 0xEE	; 238
    2df8:	92 e0       	ldi	r25, 0x02	; 2
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	80 83       	st	Z, r24
    2dfe:	76 c0       	rjmp	.+236    	; 0x2eec <Servo_Rotete+0x148>
	}
	else if (Copy_Degree == 180 && Copy_ChannelId == OCA)
    2e00:	8b 81       	ldd	r24, Y+3	; 0x03
    2e02:	84 3b       	cpi	r24, 0xB4	; 180
    2e04:	69 f4       	brne	.+26     	; 0x2e20 <Servo_Rotete+0x7c>
    2e06:	8a 81       	ldd	r24, Y+2	; 0x02
    2e08:	82 30       	cpi	r24, 0x02	; 2
    2e0a:	51 f4       	brne	.+20     	; 0x2e20 <Servo_Rotete+0x7c>
	{
		DIO_vidSetPinDir(DIO_PORTD , DIO_PIN5 , DIO_OUTPUT);
    2e0c:	83 e0       	ldi	r24, 0x03	; 3
    2e0e:	65 e0       	ldi	r22, 0x05	; 5
    2e10:	41 e0       	ldi	r20, 0x01	; 1
    2e12:	0e 94 ce 09 	call	0x139c	; 0x139c <DIO_vidSetPinDir>
		TIMR1_VidSetOCACompMatchVal(2500) ;
    2e16:	84 ec       	ldi	r24, 0xC4	; 196
    2e18:	99 e0       	ldi	r25, 0x09	; 9
    2e1a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <TIMR1_VidSetOCACompMatchVal>
    2e1e:	66 c0       	rjmp	.+204    	; 0x2eec <Servo_Rotete+0x148>
	}
	else if (Copy_Degree == 180 && Copy_ChannelId == OCB)
    2e20:	8b 81       	ldd	r24, Y+3	; 0x03
    2e22:	84 3b       	cpi	r24, 0xB4	; 180
    2e24:	79 f4       	brne	.+30     	; 0x2e44 <Servo_Rotete+0xa0>
    2e26:	8a 81       	ldd	r24, Y+2	; 0x02
    2e28:	83 30       	cpi	r24, 0x03	; 3
    2e2a:	61 f4       	brne	.+24     	; 0x2e44 <Servo_Rotete+0xa0>
	{
		DIO_vidSetPinDir(DIO_PORTD , DIO_PIN4 , DIO_OUTPUT);
    2e2c:	83 e0       	ldi	r24, 0x03	; 3
    2e2e:	64 e0       	ldi	r22, 0x04	; 4
    2e30:	41 e0       	ldi	r20, 0x01	; 1
    2e32:	0e 94 ce 09 	call	0x139c	; 0x139c <DIO_vidSetPinDir>
		OCR1BL =  2500 ;
    2e36:	e8 e4       	ldi	r30, 0x48	; 72
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	84 ec       	ldi	r24, 0xC4	; 196
    2e3c:	99 e0       	ldi	r25, 0x09	; 9
    2e3e:	91 83       	std	Z+1, r25	; 0x01
    2e40:	80 83       	st	Z, r24
    2e42:	54 c0       	rjmp	.+168    	; 0x2eec <Servo_Rotete+0x148>
	}
	else if (Copy_Degree >0 && Copy_Degree < 180)
    2e44:	8b 81       	ldd	r24, Y+3	; 0x03
    2e46:	88 23       	and	r24, r24
    2e48:	09 f4       	brne	.+2      	; 0x2e4c <Servo_Rotete+0xa8>
    2e4a:	4f c0       	rjmp	.+158    	; 0x2eea <Servo_Rotete+0x146>
    2e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4e:	84 3b       	cpi	r24, 0xB4	; 180
    2e50:	08 f0       	brcs	.+2      	; 0x2e54 <Servo_Rotete+0xb0>
    2e52:	4b c0       	rjmp	.+150    	; 0x2eea <Servo_Rotete+0x146>
	{
		if (Copy_ChannelId == OCA)
    2e54:	8a 81       	ldd	r24, Y+2	; 0x02
    2e56:	82 30       	cpi	r24, 0x02	; 2
    2e58:	09 f5       	brne	.+66     	; 0x2e9c <Servo_Rotete+0xf8>
		{
			DIO_vidSetPinDir(DIO_PORTD , DIO_PIN5 , DIO_OUTPUT);
    2e5a:	83 e0       	ldi	r24, 0x03	; 3
    2e5c:	65 e0       	ldi	r22, 0x05	; 5
    2e5e:	41 e0       	ldi	r20, 0x01	; 1
    2e60:	0e 94 ce 09 	call	0x139c	; 0x139c <DIO_vidSetPinDir>
			TIMR1_VidSetOCACompMatchVal(((u32)Copy_Degree * 2500) / 180) ;
    2e64:	8b 81       	ldd	r24, Y+3	; 0x03
    2e66:	88 2f       	mov	r24, r24
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	a0 e0       	ldi	r26, 0x00	; 0
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	24 ec       	ldi	r18, 0xC4	; 196
    2e70:	39 e0       	ldi	r19, 0x09	; 9
    2e72:	40 e0       	ldi	r20, 0x00	; 0
    2e74:	50 e0       	ldi	r21, 0x00	; 0
    2e76:	bc 01       	movw	r22, r24
    2e78:	cd 01       	movw	r24, r26
    2e7a:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsi3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	24 eb       	ldi	r18, 0xB4	; 180
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e0       	ldi	r20, 0x00	; 0
    2e88:	50 e0       	ldi	r21, 0x00	; 0
    2e8a:	bc 01       	movw	r22, r24
    2e8c:	cd 01       	movw	r24, r26
    2e8e:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__udivmodsi4>
    2e92:	da 01       	movw	r26, r20
    2e94:	c9 01       	movw	r24, r18
    2e96:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <TIMR1_VidSetOCACompMatchVal>
    2e9a:	28 c0       	rjmp	.+80     	; 0x2eec <Servo_Rotete+0x148>
		}
		else if (Copy_ChannelId == OCB)
    2e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9e:	83 30       	cpi	r24, 0x03	; 3
    2ea0:	29 f5       	brne	.+74     	; 0x2eec <Servo_Rotete+0x148>
		{
			DIO_vidSetPinDir(DIO_PORTD , DIO_PIN4 , DIO_OUTPUT);
    2ea2:	83 e0       	ldi	r24, 0x03	; 3
    2ea4:	64 e0       	ldi	r22, 0x04	; 4
    2ea6:	41 e0       	ldi	r20, 0x01	; 1
    2ea8:	0e 94 ce 09 	call	0x139c	; 0x139c <DIO_vidSetPinDir>
			OCR1BL =  ((u32)Copy_Degree * 2500) / 180 ;
    2eac:	08 e4       	ldi	r16, 0x48	; 72
    2eae:	10 e0       	ldi	r17, 0x00	; 0
    2eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb2:	88 2f       	mov	r24, r24
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	a0 e0       	ldi	r26, 0x00	; 0
    2eb8:	b0 e0       	ldi	r27, 0x00	; 0
    2eba:	24 ec       	ldi	r18, 0xC4	; 196
    2ebc:	39 e0       	ldi	r19, 0x09	; 9
    2ebe:	40 e0       	ldi	r20, 0x00	; 0
    2ec0:	50 e0       	ldi	r21, 0x00	; 0
    2ec2:	bc 01       	movw	r22, r24
    2ec4:	cd 01       	movw	r24, r26
    2ec6:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsi3>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	24 eb       	ldi	r18, 0xB4	; 180
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	40 e0       	ldi	r20, 0x00	; 0
    2ed4:	50 e0       	ldi	r21, 0x00	; 0
    2ed6:	bc 01       	movw	r22, r24
    2ed8:	cd 01       	movw	r24, r26
    2eda:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__udivmodsi4>
    2ede:	da 01       	movw	r26, r20
    2ee0:	c9 01       	movw	r24, r18
    2ee2:	f8 01       	movw	r30, r16
    2ee4:	91 83       	std	Z+1, r25	; 0x01
    2ee6:	80 83       	st	Z, r24
    2ee8:	01 c0       	rjmp	.+2      	; 0x2eec <Servo_Rotete+0x148>
		}
	}
	else
	{
		Local_ErrorState = NOK ;
    2eea:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState ;
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	cf 91       	pop	r28
    2ef6:	df 91       	pop	r29
    2ef8:	1f 91       	pop	r17
    2efa:	0f 91       	pop	r16
    2efc:	08 95       	ret

00002efe <main>:
 */

#include "Garage_System_Interface.h"

void main (void)
{
    2efe:	df 93       	push	r29
    2f00:	cf 93       	push	r28
    2f02:	cd b7       	in	r28, 0x3d	; 61
    2f04:	de b7       	in	r29, 0x3e	; 62
	Garage_System_Init();
    2f06:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Garage_System_Init>

	Garage_System_Start();
    2f0a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <Garage_System_Start>
}
    2f0e:	cf 91       	pop	r28
    2f10:	df 91       	pop	r29
    2f12:	08 95       	ret

00002f14 <__mulsi3>:
    2f14:	62 9f       	mul	r22, r18
    2f16:	d0 01       	movw	r26, r0
    2f18:	73 9f       	mul	r23, r19
    2f1a:	f0 01       	movw	r30, r0
    2f1c:	82 9f       	mul	r24, r18
    2f1e:	e0 0d       	add	r30, r0
    2f20:	f1 1d       	adc	r31, r1
    2f22:	64 9f       	mul	r22, r20
    2f24:	e0 0d       	add	r30, r0
    2f26:	f1 1d       	adc	r31, r1
    2f28:	92 9f       	mul	r25, r18
    2f2a:	f0 0d       	add	r31, r0
    2f2c:	83 9f       	mul	r24, r19
    2f2e:	f0 0d       	add	r31, r0
    2f30:	74 9f       	mul	r23, r20
    2f32:	f0 0d       	add	r31, r0
    2f34:	65 9f       	mul	r22, r21
    2f36:	f0 0d       	add	r31, r0
    2f38:	99 27       	eor	r25, r25
    2f3a:	72 9f       	mul	r23, r18
    2f3c:	b0 0d       	add	r27, r0
    2f3e:	e1 1d       	adc	r30, r1
    2f40:	f9 1f       	adc	r31, r25
    2f42:	63 9f       	mul	r22, r19
    2f44:	b0 0d       	add	r27, r0
    2f46:	e1 1d       	adc	r30, r1
    2f48:	f9 1f       	adc	r31, r25
    2f4a:	bd 01       	movw	r22, r26
    2f4c:	cf 01       	movw	r24, r30
    2f4e:	11 24       	eor	r1, r1
    2f50:	08 95       	ret

00002f52 <__udivmodhi4>:
    2f52:	aa 1b       	sub	r26, r26
    2f54:	bb 1b       	sub	r27, r27
    2f56:	51 e1       	ldi	r21, 0x11	; 17
    2f58:	07 c0       	rjmp	.+14     	; 0x2f68 <__udivmodhi4_ep>

00002f5a <__udivmodhi4_loop>:
    2f5a:	aa 1f       	adc	r26, r26
    2f5c:	bb 1f       	adc	r27, r27
    2f5e:	a6 17       	cp	r26, r22
    2f60:	b7 07       	cpc	r27, r23
    2f62:	10 f0       	brcs	.+4      	; 0x2f68 <__udivmodhi4_ep>
    2f64:	a6 1b       	sub	r26, r22
    2f66:	b7 0b       	sbc	r27, r23

00002f68 <__udivmodhi4_ep>:
    2f68:	88 1f       	adc	r24, r24
    2f6a:	99 1f       	adc	r25, r25
    2f6c:	5a 95       	dec	r21
    2f6e:	a9 f7       	brne	.-22     	; 0x2f5a <__udivmodhi4_loop>
    2f70:	80 95       	com	r24
    2f72:	90 95       	com	r25
    2f74:	bc 01       	movw	r22, r24
    2f76:	cd 01       	movw	r24, r26
    2f78:	08 95       	ret

00002f7a <__udivmodsi4>:
    2f7a:	a1 e2       	ldi	r26, 0x21	; 33
    2f7c:	1a 2e       	mov	r1, r26
    2f7e:	aa 1b       	sub	r26, r26
    2f80:	bb 1b       	sub	r27, r27
    2f82:	fd 01       	movw	r30, r26
    2f84:	0d c0       	rjmp	.+26     	; 0x2fa0 <__udivmodsi4_ep>

00002f86 <__udivmodsi4_loop>:
    2f86:	aa 1f       	adc	r26, r26
    2f88:	bb 1f       	adc	r27, r27
    2f8a:	ee 1f       	adc	r30, r30
    2f8c:	ff 1f       	adc	r31, r31
    2f8e:	a2 17       	cp	r26, r18
    2f90:	b3 07       	cpc	r27, r19
    2f92:	e4 07       	cpc	r30, r20
    2f94:	f5 07       	cpc	r31, r21
    2f96:	20 f0       	brcs	.+8      	; 0x2fa0 <__udivmodsi4_ep>
    2f98:	a2 1b       	sub	r26, r18
    2f9a:	b3 0b       	sbc	r27, r19
    2f9c:	e4 0b       	sbc	r30, r20
    2f9e:	f5 0b       	sbc	r31, r21

00002fa0 <__udivmodsi4_ep>:
    2fa0:	66 1f       	adc	r22, r22
    2fa2:	77 1f       	adc	r23, r23
    2fa4:	88 1f       	adc	r24, r24
    2fa6:	99 1f       	adc	r25, r25
    2fa8:	1a 94       	dec	r1
    2faa:	69 f7       	brne	.-38     	; 0x2f86 <__udivmodsi4_loop>
    2fac:	60 95       	com	r22
    2fae:	70 95       	com	r23
    2fb0:	80 95       	com	r24
    2fb2:	90 95       	com	r25
    2fb4:	9b 01       	movw	r18, r22
    2fb6:	ac 01       	movw	r20, r24
    2fb8:	bd 01       	movw	r22, r26
    2fba:	cf 01       	movw	r24, r30
    2fbc:	08 95       	ret

00002fbe <__prologue_saves__>:
    2fbe:	2f 92       	push	r2
    2fc0:	3f 92       	push	r3
    2fc2:	4f 92       	push	r4
    2fc4:	5f 92       	push	r5
    2fc6:	6f 92       	push	r6
    2fc8:	7f 92       	push	r7
    2fca:	8f 92       	push	r8
    2fcc:	9f 92       	push	r9
    2fce:	af 92       	push	r10
    2fd0:	bf 92       	push	r11
    2fd2:	cf 92       	push	r12
    2fd4:	df 92       	push	r13
    2fd6:	ef 92       	push	r14
    2fd8:	ff 92       	push	r15
    2fda:	0f 93       	push	r16
    2fdc:	1f 93       	push	r17
    2fde:	cf 93       	push	r28
    2fe0:	df 93       	push	r29
    2fe2:	cd b7       	in	r28, 0x3d	; 61
    2fe4:	de b7       	in	r29, 0x3e	; 62
    2fe6:	ca 1b       	sub	r28, r26
    2fe8:	db 0b       	sbc	r29, r27
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	f8 94       	cli
    2fee:	de bf       	out	0x3e, r29	; 62
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	cd bf       	out	0x3d, r28	; 61
    2ff4:	09 94       	ijmp

00002ff6 <__epilogue_restores__>:
    2ff6:	2a 88       	ldd	r2, Y+18	; 0x12
    2ff8:	39 88       	ldd	r3, Y+17	; 0x11
    2ffa:	48 88       	ldd	r4, Y+16	; 0x10
    2ffc:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ffe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3000:	7d 84       	ldd	r7, Y+13	; 0x0d
    3002:	8c 84       	ldd	r8, Y+12	; 0x0c
    3004:	9b 84       	ldd	r9, Y+11	; 0x0b
    3006:	aa 84       	ldd	r10, Y+10	; 0x0a
    3008:	b9 84       	ldd	r11, Y+9	; 0x09
    300a:	c8 84       	ldd	r12, Y+8	; 0x08
    300c:	df 80       	ldd	r13, Y+7	; 0x07
    300e:	ee 80       	ldd	r14, Y+6	; 0x06
    3010:	fd 80       	ldd	r15, Y+5	; 0x05
    3012:	0c 81       	ldd	r16, Y+4	; 0x04
    3014:	1b 81       	ldd	r17, Y+3	; 0x03
    3016:	aa 81       	ldd	r26, Y+2	; 0x02
    3018:	b9 81       	ldd	r27, Y+1	; 0x01
    301a:	ce 0f       	add	r28, r30
    301c:	d1 1d       	adc	r29, r1
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	f8 94       	cli
    3022:	de bf       	out	0x3e, r29	; 62
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	cd bf       	out	0x3d, r28	; 61
    3028:	ed 01       	movw	r28, r26
    302a:	08 95       	ret

0000302c <_exit>:
    302c:	f8 94       	cli

0000302e <__stop_program>:
    302e:	ff cf       	rjmp	.-2      	; 0x302e <__stop_program>
